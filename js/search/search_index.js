var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.551,1,1.07]],["body/modules/FoldableModule.html",[0,2.475,1,2.067,2,1.702,3,2.096,4,2.096,5,3.047,6,2.096,7,2.096,8,3.047,9,2.096,10,2.096,11,2.096,12,2.077,13,0.073,14,2.077,15,2.077,16,2.736,17,2.096,18,1.408,19,0.811,20,0.664,21,0.811,22,2.693,23,0.978,24,3.517,25,3.517,26,2.736,27,2.736,28,2.736,29,1.532,30,1.277,31,0.545,32,1.532,33,1.532,34,0.698,35,1.024,36,2.736,37,0.811,38,2.693,39,2.693,40,1.408,41,2.096,42,1.024,43,0.664,44,0.417,45,0.04,46,0.052,47,0.04]],["title/directives/IfSpanDirective.html",[12,1.07,48,0.892]],["body/directives/IfSpanDirective.html",[12,1.24,13,0.073,19,0.457,20,0.374,21,0.457,23,0.848,30,1.379,31,0.685,32,1.588,34,0.723,35,0.851,37,0.457,42,0.702,43,0.576,44,0.235,45,0.022,46,0.034,47,0.022,48,0.848,49,0.661,50,3.129,51,1.18,52,2.335,53,4.293,54,1.017,55,0.852,56,1.059,57,2.335,58,2.335,59,3.05,60,2.335,61,2.335,62,2.335,63,2.335,64,2.335,65,1.488,66,2.335,67,1.017,68,1.24,69,1.488,70,3.645,71,2.836,72,1.504,73,0.959,74,1.476,75,2.836,76,0.301,77,1.817,78,1.161,79,1.476,80,3.196,81,3.196,82,1.221,83,0.551,84,0.959,85,2.846,86,3.196,87,4.239,88,1.708,89,1.517,90,2.02,91,2.02,92,0.551,93,2.02,94,2.335,95,4.42,96,1.799,97,2.846,98,2.335,99,3.645,100,3.645,101,3.645,102,2.846,103,2.335,104,1.488,105,1.517,106,1.476,107,1.161,108,2.02,109,1.517,110,2.335,111,1.517,112,1.517,113,1.517,114,2.02,115,1.476,116,0.551,117,0.959,118,0.551,119,0.457,120,0.457,121,0.959,122,0.959,123,0.661,124,1.18,125,1.671,126,1.488,127,1.488,128,1.817,129,1.517,130,1.46,131,0.959,132,2.595,133,1.517,134,3.196,135,1.517,136,1.517,137,2.335,138,1.517,139,0.959,140,1.488,141,1.517,142,2.846,143,3.196,144,1.517,145,2.846,146,3.451,147,1.517,148,2.335,149,0.793,150,1.476,151,0.959,152,0.959,153,1.517,154,1.517,155,2.846,156,1.517,157,1.161,158,0.959,159,1.517,160,1.799,161,0.551,162,1.517,163,0.551,164,1.18,165,0.793,166,1.517,167,0.551,168,2.335,169,1.517,170,2.335,171,2.846,172,1.517,173,1.517]],["title/injectables/ScreenContext.html",[34,0.487,174,1.07]],["body/injectables/ScreenContext.html",[13,0.073,19,0.535,20,0.439,21,0.535,23,0.646,31,0.672,33,1.147,34,0.622,35,0.912,37,0.535,42,0.439,43,0.649,44,0.408,45,0.026,46,0.039,47,0.026,54,1.863,55,0.687,56,0.773,65,1.812,67,0.775,68,1.147,76,0.353,77,2.049,78,0.646,82,1.377,83,1.138,88,1.687,104,1.639,107,1.553,116,0.646,118,0.646,119,1.206,120,1.335,130,1.455,157,1.594,161,0.646,163,0.646,165,1.377,167,0.956,174,1.147,175,1.779,176,2.095,177,1.124,178,1.377,179,1.664,180,1.377,181,1.377,182,1.377,183,1.664,184,1.831,185,2.19,186,1.812,187,2.448,188,1.612,189,1.779,190,1.779,191,2.19,192,1.779,193,2.533,194,1.664,195,1.377,196,2.19,197,1.779,198,1.981,199,1.687,200,1.343,201,1.981,202,2.448,203,1.664,204,1.779,205,1.779,206,1.779,207,1.258,208,1.639,209,1.981,210,1.124,211,1.664,212,1.124,213,1.124,214,1.124,215,1.124,216,0.93,217,1.377,218,0.93,219,1.124,220,1.124,221,1.124,222,0.775,223,1.124,224,1.124,225,1.981,226,1.124,227,1.124,228,1.124,229,1.124,230,1.124,231,1.124,232,1.377,233,1.124,234,2.19,235,1.664,236,1.377,237,1.124,238,1.124,239,1.124,240,1.124,241,1.124,242,1.124,243,1.124,244,1.124,245,1.124,246,1.124,247,1.124,248,1.124,249,1.124,250,1.124,251,1.124,252,1.124,253,1.124,254,1.124,255,1.124,256,1.124,257,1.124,258,1.124,259,1.124]],["title/classes/ScreenContextData.html",[44,0.38,184,1.07]],["body/classes/ScreenContextData.html",[13,0.073,19,0.564,20,0.462,21,0.564,23,0.68,31,0.66,33,0.816,34,0.542,35,0.932,37,0.564,42,0.462,43,0.674,44,0.423,45,0.028,46,0.04,47,0.028,54,1.819,55,0.704,56,0.797,65,1.857,67,0.816,68,1.191,76,0.371,78,0.68,83,0.68,88,1.407,92,1.173,104,1.689,107,1.372,116,0.68,118,0.68,119,1.137,120,1.348,130,1.479,157,1.611,161,0.68,163,0.68,165,1.429,167,0.993,174,1.191,176,1.857,177,1.183,178,0.979,179,1.183,180,0.979,181,0.979,182,0.979,183,1.183,184,1.819,185,1.183,186,0.979,187,2.493,188,1.646,191,1.728,193,2.387,194,1.183,195,0.979,196,2.041,198,2.041,199,1.719,200,1.372,201,2.041,202,2.493,203,1.183,207,1.372,208,1.689,209,2.041,210,1.183,211,1.728,212,1.183,213,1.183,214,1.183,215,1.183,216,0.979,217,1.429,218,0.979,219,1.183,220,1.183,221,1.183,222,0.816,223,1.728,224,1.728,225,2.691,226,1.183,227,1.183,228,1.183,229,1.183,230,1.183,231,1.183,232,1.429,233,1.183,234,2.244,235,1.728,236,1.429,237,1.183,238,1.183,239,1.183,240,1.183,241,1.183,242,1.183,243,1.183,244,1.183,245,1.183,246,1.183,247,1.183,248,1.183,249,1.183,250,1.183,251,1.183,252,1.183,253,1.183,254,1.183,255,1.183,256,1.183,257,1.183,258,1.183,259,1.183,260,1.872,261,2.127,262,1.872,263,1.872,264,1.872]],["title/directives/SplitLayoutDirective.html",[14,1.07,48,0.892]],["body/directives/SplitLayoutDirective.html",[13,0.073,14,1.085,15,1.085,19,0.497,20,0.407,21,0.497,23,0.904,29,1.94,30,1.462,31,0.695,32,1.085,34,0.747,35,0.929,37,0.497,40,2.229,42,0.614,43,0.614,44,0.256,45,0.024,46,0.037,47,0.024,48,1.212,49,0.719,54,1.641,55,0.494,56,1.066,67,1.085,68,1.306,69,1.302,72,1.085,73,1.043,74,1.573,76,0.327,78,0.599,79,1.573,82,1.302,83,0.599,84,1.043,88,1.455,90,1.573,91,1.573,92,0.599,93,1.573,96,1.895,106,1.895,107,0.904,108,1.043,114,1.573,115,1.573,116,0.599,117,1.043,118,0.599,119,0.497,120,0.497,123,1.704,124,1.284,130,1.212,131,1.043,132,1.573,139,1.043,140,0.863,149,0.863,150,1.573,151,1.043,152,1.043,157,1.089,158,1.043,160,1.043,161,0.904,163,0.904,167,1.089,188,1.085,199,1.085,207,0.904,265,2.788,266,1.284,267,2.49,268,1.895,269,2.49,270,2.11,271,1.937,272,2.333,273,1.937,274,2.49,275,2.998,276,2.49,277,2.603,278,2.49,279,2.49,280,2.49,281,2.11,282,1.573,283,1.573,284,2.931,285,2.998,286,1.65,287,2.49,288,2.333,289,2.381,290,1.65,291,1.65,292,1.65,293,1.284,294,2.333,295,1.284,296,0.863,297,1.284,298,1.895,299,2.333,300,1.573,301,1.284,302,1.284,303,1.284,304,1.043,305,1.284,306,1.284,307,2.333,308,2.998,309,1.937,310,1.65,311,1.65,312,3.338,313,2.333,314,2.49,315,2.998,316,1.65,317,1.284,318,1.65,319,3.338,320,2.49,321,1.937,322,1.937,323,2.49,324,1.65,325,1.937,326,1.284,327,1.65,328,1.65,329,1.284,330,1.284,331,1.65,332,1.284,333,1.65,334,2.49,335,2.333,336,1.284,337,1.284,338,2.333,339,1.284,340,1.65,341,1.65]],["title/interfaces/Window.html",[200,0.892,222,1.07]],["body/interfaces/Window.html",[13,0.073,19,0.599,20,0.491,21,0.599,31,0.643,33,0.867,34,0.567,35,0.955,37,0.599,42,0.491,43,0.705,44,0.443,45,0.029,46,0.042,47,0.029,54,1.755,55,0.663,56,0.705,65,1.748,67,0.867,68,1.245,76,0.395,78,0.723,83,0.723,92,0.723,104,1.495,107,1.406,116,0.723,118,0.723,119,1.1,120,1.321,130,1.507,157,1.63,161,0.723,163,0.723,165,1.495,167,1.038,174,1.245,176,1.041,177,1.258,178,1.041,179,1.258,180,1.041,181,1.041,182,1.041,183,1.258,184,1.808,185,1.258,186,1.041,187,2.31,188,1.457,191,1.806,193,2.446,194,1.258,195,1.041,196,2.546,198,1.806,199,1.592,200,1.406,201,1.806,202,2.446,203,1.258,207,1.214,208,1.495,209,1.806,210,1.258,211,1.806,212,1.258,213,1.258,214,1.258,215,1.258,216,1.041,217,1.495,218,1.041,219,1.258,220,1.258,221,1.258,222,0.867,223,1.258,224,1.258,225,2.113,226,1.258,227,1.258,228,1.258,229,1.258,230,1.258,231,1.258,232,1.495,233,1.258,234,2.31,235,1.806,236,1.495,237,1.258,238,1.258,239,1.258,240,1.258,241,1.258,242,1.258,243,1.258,244,1.258,245,1.258,246,1.258,247,1.258,248,1.258,249,1.258,250,1.258,251,1.258,252,1.258,253,1.258,254,1.258,255,1.258,256,1.258,257,1.258,258,1.258,259,1.258,261,2.224,342,1.991,343,2.858]],["title/directives/WindowDirective.html",[15,1.07,48,0.892]],["body/directives/WindowDirective.html",[13,0.073,14,1.612,15,1.047,19,0.474,20,0.389,21,0.474,23,0.873,29,1.047,30,1.275,31,0.684,32,1.42,34,0.734,35,0.949,37,0.474,40,0.824,41,1.226,42,0.593,43,0.389,44,0.244,45,0.023,46,0.035,47,0.023,48,1.344,49,0.686,55,0.477,56,0.389,69,1.257,72,1.047,73,0.996,74,1.519,76,0.477,78,0.572,79,1.519,82,1.257,83,0.572,84,0.996,88,1.27,90,1.519,91,1.519,92,1.058,93,1.519,106,1.842,107,0.572,108,0.996,114,1.519,115,1.519,116,0.572,117,0.996,118,0.572,119,0.474,120,0.474,130,1.275,131,0.996,132,1.519,139,0.996,140,1.835,149,0.824,150,1.519,151,0.996,152,0.996,157,0.572,158,0.996,160,0.996,161,1.058,163,1.058,167,1.184,188,1.047,199,1.047,200,1.531,207,0.873,208,1.257,232,0.824,268,2.432,270,2.338,271,1.87,272,2.267,273,1.87,277,1.842,281,2.06,282,1.519,283,1.519,288,2.267,289,1.842,293,1.226,294,2.267,295,1.226,296,0.824,298,2.06,300,2.338,301,1.226,302,1.226,303,1.226,304,0.996,305,1.226,306,1.226,307,1.226,309,2.267,313,1.87,317,1.226,321,1.87,322,1.87,325,3.163,326,1.87,329,1.226,330,2.537,332,1.226,335,1.87,336,1.226,337,1.226,338,2.267,339,1.226,344,1.575,345,2.403,346,3.435,347,2.403,348,2.403,349,2.403,350,1.87,351,2.403,352,2.403,353,1.519,354,4.276,355,3.281,356,2.403,357,2.403,358,2.403,359,2.403,360,2.879,361,2.914,362,1.575,363,3.7,364,2.403,365,3.51,366,1.575,367,2.403,368,3.26,369,2.403,370,3.26,371,3.26,372,2.403,373,2.914,374,3.26,375,2.403,376,1.575,377,2.403,378,1.575,379,1.575,380,1.575,381,1.575]],["title/miscellaneous/enumerations.html",[382,1.083,383,2.288]],["body/miscellaneous/enumerations.html",[12,1.351,13,0.071,29,1.351,30,1.519,31,0.596,40,1.621,45,0.046,46,0.057,47,0.046,50,2.413,51,2.993,55,0.763,56,0.949,59,2.993,76,0.615,96,1.96,120,1.158,121,1.96,122,1.96,123,1.351,125,2.287,126,2.287,127,2.287,128,3.403,176,1.621,265,2.413,266,2.993,268,1.96,277,2.431,289,1.96,297,2.413,298,2.431,299,2.993,300,2.431,353,3.011,382,1.621,383,2.413,384,3.101,385,3.847,386,3.101,387,3.101,388,3.101]],["title/index.html",[76,0.411,389,1.309,390,1.309]],["body/index.html",[1,1.44,13,0.071,18,1.283,20,0.605,26,1.909,27,2.909,28,1.909,29,1.069,30,1.453,31,0.721,32,1.44,33,1.44,34,0.794,35,0.815,36,1.909,42,0.605,43,0.815,44,0.512,45,0.036,46,0.049,47,0.036,49,1.069,55,0.656,69,1.283,71,3.25,72,1.44,75,1.909,119,1.125,121,1.551,123,1.069,125,1.729,126,1.283,127,1.283,140,1.283,149,1.283,178,1.283,181,1.283,182,1.283,184,1.069,186,1.283,195,1.729,200,1.201,207,1.517,236,1.283,281,2.089,282,1.551,283,1.551,284,1.909,296,1.729,304,1.551,346,2.572,350,1.909,360,1.909,391,2.453,392,4.176,393,4.176,394,2.453,395,2.453,396,4.176,397,2.453,398,2.453,399,2.453,400,2.453,401,1.909,402,2.453,403,2.572,404,2.453,405,2.453,406,2.453,407,2.453,408,3.306,409,3.306,410,2.453,411,2.453,412,2.453,413,2.453,414,2.453,415,2.453,416,2.453,417,2.453,418,2.453,419,3.306,420,2.453,421,3.306,422,2.453,423,2.453,424,2.453,425,2.453,426,2.453,427,2.453,428,2.453,429,2.453,430,2.453,431,2.453,432,2.453,433,2.453,434,2.453,435,2.453,436,1.909,437,4.001,438,3.306,439,1.909,440,2.453,441,1.909,442,2.453,443,2.453,444,2.453,445,2.453,446,1.909,447,2.453,448,2.453,449,2.453,450,2.453,451,2.453,452,2.453,453,2.453,454,2.453,455,2.453,456,1.909,457,2.453]],["title/license.html",[389,1.309,390,1.309,458,1.612]],["body/license.html",[13,0.056,18,1.581,45,0.045,46,0.056,47,0.045,122,1.912,123,1.65,446,2.354,456,2.354,458,2.354,459,3.788,460,4.135,461,3.024,462,3.024,463,3.024,464,3.024,465,3.788,466,3.024,467,3.024,468,3.024,469,3.024,470,3.024,471,3.024,472,3.788,473,4.712,474,3.024,475,3.024,476,3.024,477,4.135,478,3.024,479,3.788,480,3.024,481,3.024,482,3.024,483,3.024,484,2.354,485,3.024,486,3.024,487,3.024,488,3.024,489,3.788,490,3.024,491,3.024,492,3.024,493,3.024,494,3.024,495,3.024,496,3.788,497,3.788,498,3.024,499,3.024,500,3.024,501,3.024,502,3.024,503,3.024,504,3.024,505,3.024,506,3.024,507,3.024,508,3.024,509,3.024,510,3.024,511,3.024,512,3.024,513,3.024,514,3.024,515,3.024,516,3.024,517,3.024,518,3.024,519,3.024,520,3.024,521,3.024,522,3.024,523,3.024,524,3.024,525,3.024,526,3.024]],["title/modules.html",[2,2.09]],["body/modules.html",[1,1.641,2,2.38,13,0.064,45,0.055,46,0.064,47,0.055,296,1.969,527,2.931,528,3.766,529,3.766]],["title/overview.html",[530,2.573]],["body/overview.html",[0,2.503,1,2.101,3,2.529,4,2.529,5,2.529,6,2.529,7,2.529,8,2.529,9,2.529,10,2.529,11,2.529,12,2.044,13,0.07,14,2.044,15,2.044,16,3.081,17,2.529,18,1.699,44,0.503,45,0.048,46,0.058,47,0.048,49,1.416,174,1.416,222,1.416,355,3.459,530,2.529,531,3.25]],["title/todo.html",[389,1.309,390,1.309,401,1.612]],["body/todo.html",[13,0.062,45,0.053,46,0.062,47,0.053,403,2.821,436,3.288,439,2.821,441,2.821,484,3.288,527,2.821,532,3.625,533,3.625,534,3.625,535,3.625,536,3.625,537,3.625,538,3.625,539,3.625,540,3.625,541,3.625,542,3.625,543,3.625]],["title/miscellaneous/variables.html",[382,1.083,544,2.288]],["body/miscellaneous/variables.html",[13,0.069,31,0.694,45,0.049,46,0.059,47,0.049,55,0.797,56,0.991,72,1.953,76,0.661,92,1.459,125,2.343,126,2.101,127,2.101,164,3.127,180,2.101,216,2.101,217,2.101,218,2.101,270,2.54,353,2.54,382,1.741,544,2.591,545,4.018,546,4.316,547,3.33,548,4.018,549,4.018]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":354,"title":{},"body":{"directives/WindowDirective.html":{}}}],["1",{"_index":355,"title":{},"body":{"directives/WindowDirective.html":{},"overview.html":{}}}],["100",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["1fr",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2021",{"_index":462,"title":{},"body":{"license.html":{}}}],["3",{"_index":531,"title":{},"body":{"overview.html":{}}}],["_",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["above",{"_index":495,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["accepts",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":520,"title":{},"body":{"license.html":{}}}],["active",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["adapted",{"_index":415,"title":{},"body":{"index.html":{}}}],["add",{"_index":440,"title":{},"body":{"index.html":{}}}],["added",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["aiming",{"_index":410,"title":{},"body":{"index.html":{}}}],["allows",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":487,"title":{},"body":{"license.html":{}}}],["angular",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["angular/core",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["app",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":450,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":445,"title":{},"body":{"index.html":{}}}],["apps",{"_index":414,"title":{},"body":{"index.html":{}}}],["arising",{"_index":524,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["assign",{"_index":357,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":474,"title":{},"body":{"license.html":{}}}],["authors",{"_index":513,"title":{},"body":{"license.html":{}}}],["available",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["behaves",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["between",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["book",{"_index":391,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["bottom",{"_index":373,"title":{},"body":{"directives/WindowDirective.html":{}}}],["browse",{"_index":529,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"modules.html":{}}}],["build",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["c",{"_index":461,"title":{},"body":{"license.html":{}}}],["calc(100vh",{"_index":372,"title":{},"body":{"directives/WindowDirective.html":{}}}],["calc(100vw",{"_index":369,"title":{},"body":{"directives/WindowDirective.html":{}}}],["canary",{"_index":428,"title":{},"body":{"index.html":{}}}],["case",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["change",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["change').pipe",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["changed",{"_index":453,"title":{},"body":{"index.html":{}}}],["changes",{"_index":195,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["charge",{"_index":469,"title":{},"body":{"license.html":{}}}],["check",{"_index":439,"title":{},"body":{"index.html":{},"todo.html":{}}}],["choose",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":427,"title":{},"body":{"index.html":{}}}],["claim",{"_index":516,"title":{},"body":{"license.html":{}}}],["class",{"_index":44,"title":{"classes/ScreenContextData.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":260,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["cluster_foldablemodule",{"_index":9,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":10,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":419,"title":{},"body":{"index.html":{}}}],["column",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["common",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["components",{"_index":394,"title":{},"body":{"index.html":{}}}],["condition",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["connection",{"_index":525,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":452,"title":{},"body":{"index.html":{}}}],["const",{"_index":167,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(private",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["constructor(screencontext",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["container",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["contains",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["context.ts",{"_index":177,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:18",{"_index":264,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["context.ts:20",{"_index":263,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["context.ts:22",{"_index":262,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["context.ts:38",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:64",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:72",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:80",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:88",{"_index":192,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:96",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":521,"title":{},"body":{"license.html":{}}}],["copies",{"_index":489,"title":{},"body":{"license.html":{}}}],["copy",{"_index":472,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":460,"title":{},"body":{"license.html":{}}}],["creating",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["current",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":350,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["damages",{"_index":517,"title":{},"body":{"license.html":{}}}],["deal",{"_index":476,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":526,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["declare",{"_index":220,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["demo",{"_index":403,"title":{},"body":{"index.html":{},"todo.html":{}}}],["demo](todo",{"_index":405,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["design",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["device",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":183,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["different",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["directive",{"_index":48,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["directives",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":485,"title":{},"body":{"license.html":{}}}],["docs",{"_index":536,"title":{},"body":{"todo.html":{}}}],["documentation",{"_index":456,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":396,"title":{},"body":{"index.html":{}}}],["duo",{"_index":400,"title":{},"body":{"index.html":{}}}],["edge",{"_index":425,"title":{},"body":{"index.html":{}}}],["element",{"_index":358,"title":{},"body":{"directives/WindowDirective.html":{}}}],["elsetemplateref",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref|null",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":421,"title":{},"body":{"index.html":{}}}],["enable",{"_index":432,"title":{},"body":{"index.html":{}}}],["enum",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{}}}],["enumerations",{"_index":383,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env(fold",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":379,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":512,"title":{},"body":{"license.html":{}}}],["example",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["existing",{"_index":412,"title":{},"body":{"index.html":{}}}],["experiences",{"_index":397,"title":{},"body":{"index.html":{}}}],["experimental",{"_index":408,"title":{},"body":{"index.html":{}}}],["explore",{"_index":411,"title":{},"body":{"index.html":{}}}],["export",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["express",{"_index":503,"title":{},"body":{"license.html":{}}}],["expression",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["false",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspan",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(mode",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":360,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":376,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":422,"title":{},"body":{"index.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":475,"title":{},"body":{"license.html":{}}}],["fill",{"_index":538,"title":{},"body":{"todo.html":{}}}],["first",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["fitness",{"_index":508,"title":{},"body":{"license.html":{}}}],["flags",{"_index":431,"title":{},"body":{"index.html":{}}}],["flex",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["flexdirection",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fold",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["foldable",{"_index":393,"title":{},"body":{"index.html":{}}}],["foldableimport",{"_index":443,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["follow",{"_index":433,"title":{},"body":{"index.html":{}}}],["following",{"_index":494,"title":{},"body":{"license.html":{}}}],["free",{"_index":468,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(this.mediaquery",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":455,"title":{},"body":{"index.html":{}}}],["function",{"_index":343,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":492,"title":{},"body":{"license.html":{}}}],["getismultiscreen",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":191,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":389,"title":{"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["getwindowsegments",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["gha",{"_index":537,"title":{},"body":{"todo.html":{}}}],["global",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":426,"title":{},"body":{"index.html":{}}}],["granted",{"_index":467,"title":{},"body":{"license.html":{}}}],["grid",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["gridarea",{"_index":374,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["help",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["here",{"_index":435,"title":{},"body":{"index.html":{}}}],["here](todo",{"_index":457,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":466,"title":{},"body":{"license.html":{}}}],["holders",{"_index":514,"title":{},"body":{"license.html":{}}}],["holds",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["horizontal",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":367,"title":{},"body":{"directives/WindowDirective.html":{}}}],["hostbinding",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ifspandirective",{"_index":12,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["ignore",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implements",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["implied",{"_index":504,"title":{},"body":{"license.html":{}}}],["import",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":444,"title":{},"body":{"index.html":{}}}],["included",{"_index":498,"title":{},"body":{"license.html":{}}}],["including",{"_index":479,"title":{},"body":{"license.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["infos",{"_index":540,"title":{},"body":{"todo.html":{}}}],["injectable",{"_index":174,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":442,"title":{},"body":{"index.html":{}}}],["instead",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["instructions",{"_index":434,"title":{},"body":{"index.html":{}}}],["interface",{"_index":222,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["interfaces",{"_index":342,"title":{},"body":{"interfaces/Window.html":{}}}],["ismultiscreen",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["js",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["kind",{"_index":502,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":464,"title":{},"body":{"license.html":{}}}],["layout",{"_index":29,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["layout.directive",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["layout.directive.ts:110",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:90",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:99",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyle",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][this.segment",{"_index":381,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":340,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][spanning",{"_index":341,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":368,"title":{},"body":{"directives/WindowDirective.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["liability",{"_index":518,"title":{},"body":{"license.html":{}}}],["liable",{"_index":515,"title":{},"body":{"license.html":{}}}],["lib",{"_index":543,"title":{},"body":{"todo.html":{}}}],["library",{"_index":437,"title":{},"body":{"index.html":{}}}],["license",{"_index":458,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":480,"title":{},"body":{"license.html":{}}}],["limited",{"_index":505,"title":{},"body":{"license.html":{}}}],["link",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["list",{"_index":198,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["little",{"_index":418,"title":{},"body":{"index.html":{}}}],["live",{"_index":404,"title":{},"body":{"index.html":{}}}],["look",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ma",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["map",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["map(_",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":168,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matchcondition",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matching",{"_index":46,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["matchmedia(`${singlefoldhorizontal",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldhorizontal).matches",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldvertical).matches",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":375,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":352,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":218,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["mediaquery",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["merchantability",{"_index":507,"title":{},"body":{"license.html":{}}}],["merge",{"_index":483,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":424,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":382,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":459,"title":{},"body":{"license.html":{}}}],["mode",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":482,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["multiple",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["new",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngif",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":392,"title":{},"body":{"index.html":{}}}],["none",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":511,"title":{},"body":{"license.html":{}}}],["notice",{"_index":496,"title":{},"body":{"license.html":{}}}],["now",{"_index":430,"title":{},"body":{"index.html":{}}}],["npm",{"_index":441,"title":{},"body":{"index.html":{},"todo.html":{}}}],["null",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":363,"title":{},"body":{"directives/WindowDirective.html":{}}}],["observable",{"_index":193,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":471,"title":{},"body":{"license.html":{}}}],["ondestroy",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["optional",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["orientation",{"_index":448,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":523,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":530,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package.json",{"_index":539,"title":{},"body":{"todo.html":{}}}],["param",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["particular",{"_index":509,"title":{},"body":{"license.html":{}}}],["permission",{"_index":465,"title":{},"body":{"license.html":{}}}],["permit",{"_index":490,"title":{},"body":{"license.html":{}}}],["person",{"_index":470,"title":{},"body":{"license.html":{}}}],["persons",{"_index":491,"title":{},"body":{"license.html":{}}}],["placed",{"_index":347,"title":{},"body":{"directives/WindowDirective.html":{}}}],["portions",{"_index":500,"title":{},"body":{"license.html":{}}}],["position",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["possible",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["private",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":409,"title":{},"body":{"index.html":{}}}],["projects/.../if",{"_index":386,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../media",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../split",{"_index":387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/media",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":176,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/split",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":344,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:102",{"_index":364,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:105",{"_index":362,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":261,"title":{},"body":{"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["provided",{"_index":446,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["publish",{"_index":484,"title":{},"body":{"license.html":{},"todo.html":{}}}],["purpose",{"_index":510,"title":{},"body":{"license.html":{}}}],["queries",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["queries.ts",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":180,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":454,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["receive",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["regardless",{"_index":447,"title":{},"body":{"index.html":{}}}],["relative",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["release",{"_index":542,"title":{},"body":{"todo.html":{}}}],["rendered",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["replaysubject",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["requires",{"_index":423,"title":{},"body":{"index.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["responsive",{"_index":416,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":478,"title":{},"body":{"license.html":{}}}],["result",{"_index":45,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["returns",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["right",{"_index":370,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":481,"title":{},"body":{"license.html":{}}}],["root",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":532,"title":{},"body":{"todo.html":{}}}],["rxjs",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["safestyle",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":359,"title":{},"body":{"directives/WindowDirective.html":{}}}],["screen",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":34,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["screencontextdata",{"_index":184,"title":{"classes/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["screencontextsubscription",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenshot",{"_index":402,"title":{},"body":{"index.html":{}}}],["screenspanning",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["screenspanning.horizontal",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.none",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning.vertical",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["second",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["segment",{"_index":346,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["selector",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":488,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":541,"title":{},"body":{"todo.html":{}}}],["service",{"_index":178,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["services",{"_index":395,"title":{},"body":{"index.html":{}}}],["set",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(mode",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":366,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":436,"title":{},"body":{"index.html":{},"todo.html":{}}}],["shall",{"_index":497,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["single",{"_index":72,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["singlefoldhorizontal",{"_index":216,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["singlefoldvertical",{"_index":217,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["skip",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["software",{"_index":473,"title":{},"body":{"license.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["span.directive.ts:51",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:60",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:68",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:72",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:80",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["spancondition.horizontal",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":345,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["splitlayout",{"_index":361,"title":{},"body":{"directives/WindowDirective.html":{}}}],["splitlayoutdirective",{"_index":14,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["splitlayoutmode",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["splitlayoutmode.absolute",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["splitlayoutmode.flex",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["splitlayoutmode.grid",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["started",{"_index":390,"title":{"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["startwith",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["status",{"_index":407,"title":{},"body":{"index.html":{}}}],["string",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":493,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":486,"title":{},"body":{"license.html":{}}}],["subscribe(context",{"_index":451,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":499,"title":{},"body":{"license.html":{}}}],["such",{"_index":398,"title":{},"body":{"index.html":{}}}],["suit",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":527,"title":{},"body":{"modules.html":{},"todo.html":{}}}],["supported",{"_index":351,"title":{},"body":{"directives/WindowDirective.html":{}}}],["surface",{"_index":399,"title":{},"body":{"index.html":{}}}],["svg",{"_index":528,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["takeuntil",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":365,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref|null",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":420,"title":{},"body":{"index.html":{}}}],["tests",{"_index":534,"title":{},"body":{"todo.html":{}}}],["text",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thentemplateref",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.elsetemplateref",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":171,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":338,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":169,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.asobservable().pipe(skip(1)).subscribe",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.ismultiscreen",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":377,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":380,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":170,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.elsetemplateref",{"_index":173,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.thentemplateref",{"_index":172,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":378,"title":{},"body":{"directives/WindowDirective.html":{}}}],["todo",{"_index":401,"title":{"todo.html":{}},"body":{"index.html":{}}}],["top",{"_index":371,"title":{},"body":{"directives/WindowDirective.html":{}}}],["tort",{"_index":522,"title":{},"body":{"license.html":{}}}],["true",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["two",{"_index":349,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["uis",{"_index":417,"title":{},"body":{"index.html":{}}}],["unit",{"_index":533,"title":{},"body":{"todo.html":{}}}],["up",{"_index":348,"title":{},"body":{"directives/WindowDirective.html":{}}}],["updates",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":339,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":166,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["url",{"_index":406,"title":{},"body":{"index.html":{}}}],["usage",{"_index":438,"title":{},"body":{"index.html":{}}}],["use",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":449,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{}}}],["value",{"_index":353,"title":{},"body":{"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":544,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versions",{"_index":429,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["visible",{"_index":71,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["void",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["warranties",{"_index":506,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":501,"title":{},"body":{"license.html":{}}}],["web",{"_index":413,"title":{},"body":{"index.html":{}}}],["whether",{"_index":519,"title":{},"body":{"license.html":{}}}],["width",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["window",{"_index":200,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["window.directive",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.getwindowsegments",{"_index":259,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerheight",{"_index":258,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":257,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":256,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":15,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windowsegments",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":356,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":477,"title":{},"body":{"license.html":{}}}],["write",{"_index":535,"title":{},"body":{"todo.html":{}}}],["yohan",{"_index":463,"title":{},"body":{"license.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_exports\n\n\n\ncluster_FoldableModule_declarations\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi screen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi screen devices.\n * \n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [\n    IfSpanDirective,\n    WindowDirective,\n    SplitLayoutDirective\n  ],\n  exports: [\n    IfSpanDirective,\n    WindowDirective,\n    SplitLayoutDirective\n  ]\n})\nexport class FoldableModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            This text will only be visible on multi screen devices.\n                        \n                        \n                            This text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:72\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:51\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:68\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false. \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:60\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true. \n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:80\n                \n            \n\n\n            \n                \n                    ignore \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:51\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:60\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:68\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Possible spanning mode conditions for use with {@link IfSpanDirective}.\n */\nexport enum SpanCondition {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical = \"fold-vertical\",\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal = \"fold-horizontal\",\n  /** No screen spanning (single screen mode). */\n  None = \"none\",\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi = 'multi'\n}\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n * \n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n * \n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]'\n})\nexport class IfSpanDirective implements OnDestroy {\n\n  private screenContextSubscription: Subscription = null;\n  private condition: SpanCondition;\n  private thenTemplateRef: TemplateRef|null = null;\n  private elseTemplateRef: TemplateRef|null = null;\n  private thenViewRef: EmbeddedViewRef|null = null;\n  private elseViewRef: EmbeddedViewRef|null = null;\n  \n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   * @param {SpanCondition} condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef|null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef|null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(private screenContext: ScreenContext, private viewContainer: ViewContainerRef, templateRef: TemplateRef) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext.asObservable().pipe(skip(1)).subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.Horizontal;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.Vertical;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(this.thenTemplateRef);\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(this.elseTemplateRef);\n        }\n      }\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's screen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:38\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObject\n                        \n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:96\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                    \n                    \n                        Returns :         ScreenContextData\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObservable\n                        \n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:88\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:64\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                \n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:72\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                \n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:80\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                \n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport class ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(`${singleFoldHorizontal}, ${singleFoldVertical}`);\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map(_ => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  \n  /** \n   * The list of available window segments.\n   * @returns {DOMRect[]}\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   * @returns {ScreenSpanning}\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   * @returns {boolean}\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   * @returns {Observable}\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   * @returns {ScreenContextData}\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments() {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScreenContextData.html":{"url":"classes/ScreenContextData.html","title":"class - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                isMultiScreen\n                            \n                            \n                                    Readonly\n                                screenSpanning\n                            \n                            \n                                    Readonly\n                                windowSegments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            isMultiScreen\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/lib/src/core/screen-context.ts:22\n                            \n                        \n\n                \n                    \n                        True is current device have multiple screens available. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            screenSpanning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ScreenSpanning\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/lib/src/core/screen-context.ts:20\n                            \n                        \n\n                \n                    \n                        The current screen spanning mode. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            windowSegments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DOMRect[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/lib/src/core/screen-context.ts:18\n                            \n                        \n\n                \n                    \n                        The list of available window segments. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport class ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(`${singleFoldHorizontal}, ${singleFoldVertical}`);\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map(_ => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  \n  /** \n   * The list of available window segments.\n   * @returns {DOMRect[]}\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   * @returns {ScreenSpanning}\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   * @returns {boolean}\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   * @returns {Observable}\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   * @returns {ScreenContextData}\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments() {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your design.\nThis directive should be used along with WindowDirective.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:99\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:90\n                            \n                        \n                \n                    \n                        Sets the current split layout mode to use when multi screen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(mode)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:90\n                                \n                            \n                    \n                        \n                                Sets the current split layout mode to use when multi screen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            mode\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout mode to use.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:110\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n */\nexport enum SplitLayoutMode {\n  Flex = 'flex',\n  Grid = 'grid',\n  Absolute = 'absolute'\n}\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ \n * @ignore \n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: '100%'\n    },\n    [ScreenSpanning.Vertical]: {\n      flexDirection: 'row'\n    },\n    [ScreenSpanning.Horizontal]: {\n      flexDirection: 'column'\n    }\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: '100%'\n    },\n    [ScreenSpanning.Vertical]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'env(fold-width)'\n    },\n    [ScreenSpanning.Horizontal]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'env(fold-height)'\n    }\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: '100%'\n    }\n  }\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi screen devices.\n * \n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your design.\n * \n * This directive should be used along with {@link WindowDirective}.\n *  \n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdSplitLayout]'\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  \n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private layoutStyle: SafeStyle;\n  private screenContextSubscription: Subscription = null;\n\n  /**\n   * Sets the current split layout mode to use when multi screen is detected.\n   * @param {SplitLayoutMode} mode The split layout mode to use.\n   */\n  @Input()\n  set fdSplitLayout(mode: SplitLayoutMode) {\n    this.mode = mode || SplitLayoutMode.Flex;\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(private screenContext: ScreenContext) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext.asObservable().pipe(skip(1)).subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   * @return {SplitLayoutMode} The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    if (isMultiScreen) {\n      const spanning = this.screenContext.screenSpanning;\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][spanning]\n      }\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        getWindowSegments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport class ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(`${singleFoldHorizontal}, ${singleFoldVertical}`);\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map(_ => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  \n  /** \n   * The list of available window segments.\n   * @returns {DOMRect[]}\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   * @returns {ScreenSpanning}\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   * @returns {boolean}\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   * @returns {Observable}\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   * @returns {ScreenContextData}\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments() {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple container\nelement to the same window segment.\n\n            \n\n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:105\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                    SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:102\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi screen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment: number)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:102\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi screen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, Host, HostBinding, Input } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport { SplitLayoutDirective, SplitLayoutMode } from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ \n * @ignore \n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.Vertical]: [\n      { flex: '0 1 env(fold-left)' },\n      { flex: '0 1 calc(100vw - env(fold-right))' }\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { flex: '0 1 env(fold-top)' },\n      { flex: '0 1 calc(100vh - env(fold-bottom))' }\n    ]\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.Vertical]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ]\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.Vertical]: [\n      {\n        position: 'absolute',\n        left: 0,\n        right: 'calc(100vw - env(fold-left))',\n      },\n      {\n        position: 'absolute',\n        left: 'env(fold-right)',\n        right: 0\n      }\n    ],\n    [ScreenSpanning.Horizontal]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'env(fold-top)'\n      },\n      {\n        position: 'absolute',\n        top: 'env(fold-bottom)',\n        width: '100%',\n        maxHeight: 'calc(100vh - env(fold-bottom))'\n      }\n    ]\n  }\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n * \n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n * \n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple container\n * element to the same window segment.\n * \n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]'\n})\nexport class WindowDirective {\n\n  private segment: number = -1;\n  private layoutStyle: SafeStyle;\n  private screenContextSubscription: Subscription = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi screen is detected.\n   * @param {number} segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number) {\n    this.segment = segment;\n    this.updateStyle();\n  }\n\n  constructor(private screenContext: ScreenContext, @Host() private splitLayout: SplitLayoutDirective) {\n    this.screenContextSubscription = this.screenContext.asObservable().pipe(skip(1)).subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n\n    if (isMultiScreen) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n      const mode = this.splitLayout.layoutMode;\n      const spanning = this.screenContext.screenSpanning;\n      this.layoutStyle = layoutStyles[mode][spanning][this.segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/screen-spanning.ts\n    \n        \n            \n                \n                    \n                        \n                        ScreenSpanning\n                    \n                \n                    \n                        \n                            Represents the screen spanning mode.\n\n                        \n                    \n                        \n                            \n                                 Vertical\n                            \n                        \n                        \n                            \n                                Value : fold-vertical\n                            \n                        \n                        \n                            \n                                 Horizontal\n                            \n                        \n                        \n                            \n                                Value : fold-horizontal\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    projects/lib/src/core/if-span.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        SpanCondition\n                    \n                \n                    \n                        \n                            Possible spanning mode conditions for use with IfSpanDirective.\n\n                        \n                    \n                        \n                            \n                                 Vertical\n                            \n                        \n                        \n                            \n                                Value : fold-vertical\n                            \n                        \n                        \n                            \n                                 Horizontal\n                            \n                        \n                        \n                            \n                                Value : fold-horizontal\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 Multi\n                            \n                        \n                        \n                            \n                                Value : multi\n                            \n                        \n            \n        \n\n    projects/lib/src/core/split-layout.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        SplitLayoutMode\n                    \n                \n                    \n                        \n                            Defines how the split layout container should be rendered when multi screen\nis detected.\n\n                        \n                    \n                        \n                            \n                                 Flex\n                            \n                        \n                        \n                            \n                                Value : flex\n                            \n                        \n                        \n                            \n                                 Grid\n                            \n                        \n                        \n                            \n                                Value : grid\n                            \n                        \n                        \n                            \n                                 Absolute\n                            \n                        \n                        \n                            \n                                Value : absolute\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n:book: ngx-foldable\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\nTODO: screenshot demo\nSee the [Live Demo](TODO URL)\nStatus\nThis is currently an experimental project aiming to explore how existing web apps could be adapted to build responsive UIs on dual-screen devices, with as little changes as possible on the code.\nHow to test on your browser\nThe dual-screen emulation feature requires Microsoft Edge or Google Chrome canary versions for now, with experimental flags to enable.\nFollow the instructions here to setup your browser for dual-screen emulation.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n\n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on horizontal fold spanning.\n    This is only visible on vertical fold spanning.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe(context: ScreenContextData) {\n        console.log('Screen context changed:', context);\n      }\n  }\n}You can read the full documentation [here](TODO link).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\n\n Check RTL support\n Unit tests\n Write docs\n Setup GHA to publish demo\n Fill package.json infos\n Setup semantic release\n Publish lib NPM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            singleFoldHorizontal   (projects/.../media-queries.ts)\n                        \n                        \n                            singleFoldVertical   (projects/.../media-queries.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/media-queries.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldHorizontal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-horizontal)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold horizontal screen mode. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldVertical\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-vertical)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold vertical screen mode. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
