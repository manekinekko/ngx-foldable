var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.551,1,1.07]],["body/modules/FoldableModule.html",[0,2.497,1,2.072,2,1.734,3,2.135,4,2.135,5,3.075,6,2.135,7,2.135,8,3.075,9,2.135,10,2.135,11,2.135,12,2.081,13,0.072,14,2.081,15,2.081,16,2.77,17,2.135,18,1.435,19,0.826,20,0.677,21,0.826,22,2.744,23,0.996,24,3.56,25,3.56,26,2.77,27,2.77,28,2.77,29,1.551,30,1.293,31,0.551,32,1.551,33,1.551,34,0.551,35,1.031,36,2.77,37,0.826,38,2.744,39,2.744,40,1.435,41,2.135,42,1.259,43,0.544,44,0.425,45,0.04,46,0.052,47,0.04]],["title/directives/IfSpanDirective.html",[12,1.07,48,0.739]],["body/directives/IfSpanDirective.html",[12,1.236,13,0.073,19,0.454,20,0.372,21,0.454,23,0.844,30,1.376,31,0.684,32,1.585,34,0.563,35,0.849,37,0.454,42,0.854,43,0.461,44,0.234,45,0.022,46,0.034,47,0.022,48,0.7,49,0.548,50,3.124,51,1.174,52,2.325,53,4.288,54,1.013,55,0.851,56,1.058,57,2.325,58,2.325,59,2.949,60,2.325,61,2.325,62,2.325,63,2.325,64,2.325,65,1.483,66,2.325,67,0.844,68,1.03,69,1.483,70,3.637,71,2.83,72,1.5,73,0.954,74,1.469,75,2.299,76,0.299,77,1.809,78,1.158,79,1.469,80,3.187,81,3.187,82,1.216,83,0.844,84,1.174,85,2.837,86,3.187,87,4.415,88,1.705,89,1.509,90,2.014,91,2.014,92,0.548,93,2.014,94,2.325,95,4.415,96,1.793,97,2.837,98,2.325,99,3.637,100,2.299,101,3.637,102,2.837,103,2.325,104,1.483,105,1.509,106,1.469,107,1.667,108,2.014,109,1.509,110,2.325,111,1.509,112,1.509,113,2.837,114,2.014,115,1.469,116,0.548,117,0.954,118,0.548,119,0.454,120,0.454,121,0.954,122,0.954,123,0.657,124,1.174,125,1.667,126,1.236,127,1.483,128,1.809,129,1.509,130,1.489,131,0.954,132,2.79,133,1.509,134,1.509,135,1.509,136,1.509,137,0.954,138,1.483,139,1.509,140,2.837,141,3.187,142,1.509,143,3.187,144,3.443,145,1.509,146,2.837,147,1.469,148,0.454,149,0.454,150,0.954,151,0.954,152,0.954,153,1.509,154,1.509,155,2.837,156,1.509,157,1.158,158,0.954,159,1.509,160,1.793,161,0.548,162,1.509,163,0.548,164,1.174,165,0.789,166,1.509,167,0.548,168,2.325,169,1.509,170,2.325,171,2.837,172,2.325]],["title/injectables/ScreenContext.html",[34,0.38,173,1.07]],["body/injectables/ScreenContext.html",[13,0.073,19,0.553,20,0.453,21,0.553,23,0.667,31,0.677,33,1.175,34,0.495,35,0.925,37,0.553,42,0.553,43,0.535,44,0.418,45,0.027,46,0.04,47,0.027,54,1.877,55,0.698,56,0.788,65,1.671,67,0.667,68,0.979,76,0.365,77,2.099,78,0.667,82,1.41,83,1.16,88,1.707,104,1.671,107,1.96,116,0.667,118,0.667,119,1.219,120,1.33,130,1.471,148,0.812,149,1.06,157,1.605,161,0.667,163,0.667,165,1.41,167,0.979,173,1.175,174,1.838,175,2.117,176,1.161,177,1.175,178,1.705,179,1.41,180,1.41,181,1.41,182,1.705,183,1.81,184,2.225,185,2.477,186,1.633,187,1.838,188,1.838,189,2.225,190,1.838,191,2.477,192,1.705,193,1.175,194,2.225,195,1.838,196,2.019,197,1.707,198,1.128,199,1.671,200,2.369,201,1.705,202,1.838,203,1.838,204,1.838,205,1.278,206,1.671,207,2.019,208,1.161,209,1.705,210,1.161,211,1.161,212,1.161,213,1.161,214,1.41,215,1.41,216,0.961,217,1.161,218,1.161,219,1.161,220,0.801,221,1.161,222,1.161,223,2.019,224,1.161,225,1.161,226,1.161,227,1.161,228,1.161,229,1.161,230,1.41,231,1.161,232,2.225,233,1.705,234,1.161,235,1.161,236,1.161,237,1.161,238,1.161,239,1.161,240,1.161,241,1.161,242,1.161,243,1.161,244,1.161,245,1.161,246,1.161,247,1.161,248,1.161,249,1.161,250,1.161,251,1.161,252,1.161,253,1.161,254,1.161,255,1.161,256,1.161]],["title/classes/ScreenContextData.html",[44,0.38,183,1.07]],["body/classes/ScreenContextData.html",[13,0.073,19,0.582,20,0.477,21,0.582,23,0.703,31,0.665,33,0.843,34,0.434,35,0.944,37,0.582,42,0.582,43,0.555,44,0.434,45,0.028,46,0.041,47,0.028,54,1.836,55,0.715,56,0.812,65,1.721,67,0.703,68,1.017,76,0.384,78,0.703,83,0.703,88,1.434,92,1.195,104,1.721,116,0.703,118,0.703,119,1.152,120,1.344,130,1.494,148,0.843,149,0.582,157,1.621,161,0.703,163,0.703,165,1.464,167,1.017,173,1.22,175,1.886,176,1.223,177,0.843,178,1.223,179,1.012,180,1.012,181,1.012,182,1.223,183,1.793,184,1.223,185,2.522,186,1.668,189,1.77,191,2.279,192,1.223,193,0.843,194,2.08,196,2.08,197,1.738,198,1.152,199,1.721,200,2.419,201,1.223,205,1.39,206,1.721,207,2.08,208,1.223,209,1.77,210,1.223,211,1.223,212,1.223,213,1.223,214,1.464,215,1.464,216,1.012,217,1.223,218,1.223,219,1.223,220,0.843,221,1.77,222,1.77,223,2.714,224,1.223,225,1.223,226,1.223,227,1.223,228,1.223,229,1.223,230,1.464,231,1.223,232,2.279,233,1.77,234,1.223,235,1.223,236,1.223,237,1.223,238,1.223,239,1.223,240,1.223,241,1.223,242,1.223,243,1.223,244,1.223,245,1.223,246,1.223,247,1.223,248,1.223,249,1.223,250,1.223,251,1.223,252,1.223,253,1.223,254,1.223,255,1.223,256,1.223,257,1.935,258,2.179,259,1.935,260,1.935,261,1.935]],["title/directives/SplitLayoutDirective.html",[14,1.07,48,0.739]],["body/directives/SplitLayoutDirective.html",[13,0.073,14,1.094,15,1.094,19,0.503,20,0.412,21,0.503,23,0.912,29,1.944,30,1.467,31,0.696,32,1.094,34,0.586,35,0.933,37,0.503,40,2.235,42,0.756,43,0.498,44,0.259,45,0.025,46,0.037,47,0.025,48,1.011,49,0.606,54,1.649,55,0.498,56,1.069,67,0.912,68,1.097,69,1.313,72,1.094,73,1.055,74,1.588,76,0.331,78,0.606,79,1.588,82,1.313,83,0.606,84,1.299,88,1.463,90,1.588,91,1.588,92,0.606,93,1.588,96,1.908,106,1.908,107,1.313,108,1.055,114,1.588,115,1.588,116,0.606,117,1.055,118,0.606,119,0.503,120,0.503,123,1.71,124,1.299,130,1.22,131,1.055,132,1.588,137,1.055,138,0.873,147,1.588,148,0.503,149,0.503,150,1.055,151,1.055,152,1.055,157,1.097,158,1.055,160,1.055,161,0.912,163,0.912,167,1.097,186,1.094,197,1.094,205,0.912,262,2.802,263,1.299,264,2.512,265,1.908,266,2.512,267,2.123,268,1.955,269,2.349,270,1.955,271,2.512,272,3.019,273,2.512,274,2.481,275,2.512,276,2.512,277,2.512,278,2.123,279,1.313,280,1.588,281,2.944,282,3.019,283,1.67,284,2.512,285,2.349,286,2.391,287,1.67,288,1.67,289,1.67,290,1.299,291,2.349,292,1.299,293,0.873,294,1.299,295,1.908,296,1.908,297,1.313,298,1.299,299,1.299,300,1.299,301,1.055,302,1.299,303,1.299,304,2.349,305,3.019,306,1.955,307,1.67,308,1.67,309,3.358,310,2.349,311,2.512,312,3.019,313,1.67,314,1.299,315,1.67,316,3.358,317,2.512,318,1.955,319,1.955,320,2.512,321,1.67,322,1.955,323,1.299,324,1.67,325,1.67,326,1.299,327,1.299,328,1.67,329,1.299,330,1.67,331,2.512,332,2.349,333,1.299,334,1.299,335,2.349,336,1.299,337,1.299,338,1.67,339,1.67]],["title/interfaces/Window.html",[198,0.739,220,1.07]],["body/interfaces/Window.html",[13,0.073,19,0.619,20,0.508,21,0.619,31,0.649,33,0.897,34,0.453,35,0.967,37,0.619,42,0.619,43,0.581,44,0.453,45,0.03,46,0.043,47,0.03,54,1.775,55,0.676,56,0.722,65,1.53,67,0.747,68,1.063,76,0.408,78,0.747,83,0.747,92,0.747,104,1.53,116,0.747,118,0.747,119,1.117,120,1.312,130,1.522,148,0.881,149,0.619,157,1.64,161,0.747,163,0.747,165,1.53,167,1.063,173,1.275,175,1.076,176,1.301,177,0.897,178,1.301,179,1.076,180,1.076,181,1.076,182,1.301,183,1.775,184,1.301,185,2.345,186,1.484,189,1.85,191,2.345,192,1.301,193,0.897,194,2.574,196,1.85,197,1.617,198,1.18,199,1.53,200,2.345,201,1.301,205,1.237,206,1.53,207,1.85,208,1.301,209,1.85,210,1.301,211,1.301,212,1.301,213,1.301,214,1.53,215,1.53,216,1.076,217,1.301,218,1.301,219,1.301,220,0.897,221,1.301,222,1.301,223,2.153,224,1.301,225,1.301,226,1.301,227,1.301,228,1.301,229,1.301,230,1.53,231,1.301,232,2.345,233,1.85,234,1.301,235,1.301,236,1.301,237,1.301,238,1.301,239,1.301,240,1.301,241,1.301,242,1.301,243,1.301,244,1.301,245,1.301,246,1.301,247,1.301,248,1.301,249,1.301,250,1.301,251,1.301,252,1.301,253,1.301,254,1.301,255,1.301,256,1.301,258,2.277,340,2.058,341,2.927]],["title/directives/WindowDirective.html",[15,1.07,48,0.739]],["body/directives/WindowDirective.html",[13,0.073,14,1.572,15,0.997,19,0.445,20,0.365,21,0.445,23,0.831,29,0.997,30,1.239,31,0.675,32,1.374,34,0.583,35,0.928,37,0.445,40,0.773,41,1.15,42,0.689,43,0.293,44,0.229,45,0.022,46,0.034,47,0.022,48,1.086,49,0.537,55,0.556,56,0.778,67,0.831,68,1.017,69,1.197,72,0.997,73,0.934,74,1.447,76,0.454,78,0.537,79,1.447,82,1.197,83,0.831,88,1.22,90,1.447,91,1.447,92,1.017,93,1.447,100,0.934,106,1.77,107,0.773,108,0.934,114,1.447,115,1.447,116,0.537,117,0.934,118,0.537,119,0.445,120,0.445,126,0.644,130,1.366,131,0.934,132,1.447,137,0.934,138,1.967,147,1.447,148,0.445,149,0.445,150,0.934,151,0.934,152,0.934,157,0.537,158,0.934,160,0.934,161,1.017,163,1.145,167,1.31,186,0.997,197,0.997,198,1.249,199,0.773,205,0.831,206,1.197,230,0.773,265,2.377,267,2.28,268,1.781,269,2.654,270,1.781,274,1.77,278,1.993,279,1.649,280,1.447,285,2.179,286,1.77,290,1.15,291,2.179,292,1.15,293,0.773,295,1.993,297,1.886,298,1.15,299,1.15,300,1.15,301,0.934,302,1.15,303,1.15,304,1.15,306,2.179,310,1.781,314,1.15,318,1.781,319,1.781,322,3.105,323,1.781,326,1.15,327,2.453,329,1.15,332,1.781,333,1.15,334,1.15,335,2.179,337,1.15,342,1.478,343,2.289,344,3.474,345,2.289,346,2.289,347,2.289,348,1.781,349,2.289,350,2.289,351,1.197,352,4.214,353,3.279,354,2.289,355,2.289,356,3.153,357,2.289,358,2.289,359,1.781,360,3.153,361,3.607,362,3.607,363,2.453,364,2.289,365,2.289,366,2.807,367,1.478,368,3.153,369,2.179,370,1.478,371,3.153,372,2.289,373,3.41,374,1.478,375,2.289,376,2.289,377,3.153,378,2.289,379,2.8,380,3.153,381,2.289,382,1.478,383,3.153,384,1.478,385,1.478,386,1.478,387,1.478,388,1.478,389,1.478]],["title/changelog.html",[390,1.309,391,1.309,392,2.071]],["body/changelog.html",[13,0.058,34,0.609,43,0.637,45,0.047,46,0.058,47,0.047,48,1.279,49,1.167,75,2.485,100,2.031,177,1.713,193,1.4,198,0.967,279,1.68,296,2.031,297,1.68,351,1.68,363,2.5,369,2.5,393,3.213,394,2.5,395,3.213,396,3.932,397,3.213,398,3.213,399,3.213,400,3.213,401,3.213,402,3.213,403,3.213,404,3.213,405,3.213,406,3.534,407,3.06,408,3.213,409,3.213,410,2.5,411,3.213,412,3.213,413,3.213,414,3.213,415,3.213,416,3.06,417,2.5,418,3.213,419,3.213,420,2.5,421,3.213,422,3.932,423,3.213,424,3.213,425,3.932,426,3.213,427,3.213,428,3.213,429,3.213,430,3.213,431,3.213,432,3.213,433,3.213]],["title/miscellaneous/enumerations.html",[434,1.083,435,2.288]],["body/miscellaneous/enumerations.html",[12,1.359,13,0.071,29,1.359,30,1.523,31,0.598,40,1.631,45,0.046,46,0.057,47,0.046,50,2.427,51,3.004,55,0.766,56,0.952,59,3.004,76,0.619,96,1.971,120,1.162,121,1.971,122,1.971,123,1.359,125,2.291,126,1.909,127,2.291,128,3.41,175,1.631,262,2.427,263,3.004,265,1.971,274,2.44,286,1.971,294,2.427,295,2.44,296,2.44,297,2.019,351,2.493,434,1.631,435,2.427,436,3.119,437,3.861,438,3.119,439,3.119,440,3.119]],["title/index.html",[76,0.411,390,1.309,391,1.309]],["body/index.html",[1,1.46,13,0.071,18,1.308,20,0.617,26,1.947,27,2.938,28,1.947,29,1.09,30,1.465,31,0.723,32,1.46,33,1.46,34,0.625,35,0.826,36,1.947,43,0.664,44,0.519,45,0.037,46,0.049,47,0.037,49,0.909,55,0.664,69,1.308,71,3.271,72,1.46,75,1.581,119,1.137,121,1.581,123,1.09,125,1.751,126,1.09,127,1.308,138,1.308,148,0.753,149,0.753,177,1.09,180,1.308,181,1.308,183,1.09,193,1.46,198,1.008,205,1.527,278,2.117,279,1.308,280,1.581,281,1.947,293,1.751,301,1.581,336,1.947,344,2.606,348,1.947,359,1.947,366,1.947,406,1.947,410,1.947,416,2.606,417,1.947,420,2.606,441,4.204,442,4.204,443,2.502,444,2.502,445,4.204,446,2.502,447,2.502,448,2.502,449,2.502,450,2.502,451,2.502,452,3.35,453,2.502,454,2.502,455,2.502,456,2.502,457,2.502,458,2.502,459,2.502,460,2.502,461,2.502,462,3.35,463,3.35,464,2.502,465,2.502,466,2.502,467,2.502,468,2.502,469,2.502,470,2.502,471,2.502,472,2.502,473,2.502,474,2.502,475,2.502,476,2.502,477,3.35,478,2.502,479,4.033,480,3.35,481,2.502,482,2.502,483,2.502,484,2.502,485,2.502,486,1.947,487,2.502,488,2.502,489,2.502,490,2.502,491,2.502,492,2.502,493,2.502,494,2.502,495,1.947]],["title/license.html",[390,1.309,391,1.309,496,1.612]],["body/license.html",[13,0.056,18,1.592,45,0.045,46,0.056,47,0.045,122,1.924,123,1.657,394,2.369,486,2.369,495,2.369,496,2.369,497,3.803,498,4.147,499,3.044,500,3.044,501,3.044,502,3.803,503,3.044,504,3.044,505,3.044,506,3.044,507,3.044,508,3.044,509,3.803,510,4.718,511,3.044,512,3.044,513,3.044,514,4.147,515,3.044,516,3.803,517,3.044,518,3.044,519,3.044,520,3.044,521,3.044,522,3.044,523,3.044,524,3.044,525,3.044,526,3.803,527,3.044,528,3.044,529,3.044,530,3.044,531,3.044,532,3.044,533,3.803,534,3.803,535,3.044,536,3.044,537,3.044,538,3.044,539,3.044,540,3.044,541,3.044,542,3.044,543,3.044,544,3.044,545,3.044,546,3.044,547,3.044,548,3.044,549,3.044,550,3.044,551,3.044,552,3.044,553,3.044,554,3.044,555,3.044,556,3.044,557,3.044,558,3.044,559,3.044,560,3.044,561,3.044,562,3.044,563,3.044]],["title/modules.html",[2,2.09]],["body/modules.html",[1,1.643,2,2.383,13,0.064,45,0.056,46,0.064,47,0.056,293,1.971,407,2.934,564,3.77,565,3.77]],["title/overview.html",[566,2.573]],["body/overview.html",[0,2.51,1,2.102,3,2.541,4,2.541,5,2.541,6,2.541,7,2.541,8,2.541,9,2.541,10,2.541,11,2.541,12,2.046,13,0.07,14,2.046,15,2.046,16,3.09,17,2.541,18,1.707,44,0.506,45,0.048,46,0.058,47,0.048,49,1.186,173,1.423,220,1.423,353,3.464,566,2.541,567,3.266]],["title/miscellaneous/variables.html",[434,1.083,568,2.288]],["body/miscellaneous/variables.html",[13,0.069,31,0.695,45,0.049,46,0.059,47,0.049,55,0.799,56,0.994,72,1.956,76,0.663,92,1.463,125,2.347,126,1.755,127,2.106,164,3.135,179,2.106,214,2.106,215,2.106,216,2.106,267,2.546,351,2.106,434,1.749,568,2.602,569,4.029,570,4.324,571,3.344,572,4.029,573,4.029]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":352,"title":{},"body":{"directives/WindowDirective.html":{}}}],["03",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["083b648",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":353,"title":{},"body":{"directives/WindowDirective.html":{},"overview.html":{}}}],["1.0.0",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["11",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["1fr",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2021",{"_index":394,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":567,"title":{},"body":{"overview.html":{}}}],["3ee5543",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["466a9d7",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["4708aff",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["487885f",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["536764f",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["582e83e",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["7e66b70",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["8bdb155",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["90ad184",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["962620d",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["9fadf70",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["9ff473a",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["above",{"_index":532,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["accepts",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":557,"title":{},"body":{"license.html":{}}}],["active",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["adapted",{"_index":458,"title":{},"body":{"index.html":{}}}],["add",{"_index":406,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["added",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["aiming",{"_index":453,"title":{},"body":{"index.html":{}}}],["allows",{"_index":178,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":524,"title":{},"body":{"license.html":{}}}],["angular",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["angular/core",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["api",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":490,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":485,"title":{},"body":{"index.html":{}}}],["apps",{"_index":457,"title":{},"body":{"index.html":{}}}],["arising",{"_index":561,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":184,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["assign",{"_index":355,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":511,"title":{},"body":{"license.html":{}}}],["authors",{"_index":550,"title":{},"body":{"license.html":{}}}],["available",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["b2a3632",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["behaves",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["between",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["boolean",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["bottom",{"_index":379,"title":{},"body":{"directives/WindowDirective.html":{}}}],["browse",{"_index":565,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"modules.html":{}}}],["bug",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["c",{"_index":499,"title":{},"body":{"license.html":{}}}],["calc(100vh",{"_index":378,"title":{},"body":{"directives/WindowDirective.html":{}}}],["calc(100vw",{"_index":376,"title":{},"body":{"directives/WindowDirective.html":{}}}],["canary",{"_index":470,"title":{},"body":{"index.html":{}}}],["case",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["change",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["change').pipe",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["changed",{"_index":493,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":392,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":193,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":506,"title":{},"body":{"license.html":{}}}],["check",{"_index":410,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["choose",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":469,"title":{},"body":{"index.html":{}}}],["claim",{"_index":553,"title":{},"body":{"license.html":{}}}],["class",{"_index":44,"title":{"classes/ScreenContextData.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":257,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["cluster_foldablemodule",{"_index":9,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":10,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":462,"title":{},"body":{"index.html":{}}}],["column",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["commit",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["components",{"_index":443,"title":{},"body":{"index.html":{}}}],["condition",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["connection",{"_index":562,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":492,"title":{},"body":{"index.html":{}}}],["const",{"_index":167,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(element",{"_index":367,"title":{},"body":{"directives/WindowDirective.html":{}}}],["constructor(private",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["constructor(screencontext",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{}}}],["container",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["contains",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["context.ts",{"_index":176,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:18",{"_index":261,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["context.ts:20",{"_index":260,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["context.ts:22",{"_index":259,"title":{},"body":{"classes/ScreenContextData.html":{}}}],["context.ts:39",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:64",{"_index":195,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:71",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:78",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:85",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:92",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":558,"title":{},"body":{"license.html":{}}}],["copies",{"_index":526,"title":{},"body":{"license.html":{}}}],["copy",{"_index":509,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":498,"title":{},"body":{"license.html":{}}}],["creating",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["current",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":348,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["damages",{"_index":554,"title":{},"body":{"license.html":{}}}],["db13ef1",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":513,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":563,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["declare",{"_index":218,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["demo",{"_index":416,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["design",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["device",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["different",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["direction",{"_index":360,"title":{},"body":{"directives/WindowDirective.html":{}}}],["directive",{"_index":48,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["directives",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":522,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":495,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":200,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":445,"title":{},"body":{"index.html":{}}}],["duo",{"_index":449,"title":{},"body":{"index.html":{}}}],["edge",{"_index":467,"title":{},"body":{"index.html":{}}}],["element",{"_index":356,"title":{},"body":{"directives/WindowDirective.html":{}}}],["elementref",{"_index":368,"title":{},"body":{"directives/WindowDirective.html":{}}}],["elsetemplateref",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":192,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":463,"title":{},"body":{"index.html":{}}}],["enable",{"_index":474,"title":{},"body":{"index.html":{}}}],["enum",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{}}}],["enumerations",{"_index":435,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env(fold",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":385,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":549,"title":{},"body":{"license.html":{}}}],["example",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["existing",{"_index":455,"title":{},"body":{"index.html":{}}}],["experiences",{"_index":446,"title":{},"body":{"index.html":{}}}],["experimental",{"_index":452,"title":{},"body":{"index.html":{}}}],["explore",{"_index":454,"title":{},"body":{"index.html":{}}}],["export",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["express",{"_index":540,"title":{},"body":{"license.html":{}}}],["expression",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["false",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspan",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(mode",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":366,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":382,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":464,"title":{},"body":{"index.html":{}}}],["features",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":512,"title":{},"body":{"license.html":{}}}],["finish",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":545,"title":{},"body":{"license.html":{}}}],["fix",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["flags",{"_index":473,"title":{},"body":{"index.html":{}}}],["flex",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["flexdirection",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fold",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["foldable",{"_index":442,"title":{},"body":{"index.html":{}}}],["foldableimport",{"_index":483,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["follow",{"_index":475,"title":{},"body":{"index.html":{}}}],["following",{"_index":531,"title":{},"body":{"license.html":{}}}],["free",{"_index":505,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(this.mediaquery",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":494,"title":{},"body":{"index.html":{}}}],["function",{"_index":341,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":529,"title":{},"body":{"license.html":{}}}],["getcomputedstyle(this.element.nativeelement)?.direction",{"_index":387,"title":{},"body":{"directives/WindowDirective.html":{}}}],["getismultiscreen",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":390,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getwindowsegments",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["global",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":468,"title":{},"body":{"index.html":{}}}],["granted",{"_index":504,"title":{},"body":{"license.html":{}}}],["grid",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["gridarea",{"_index":380,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["help",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["here",{"_index":477,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":503,"title":{},"body":{"license.html":{}}}],["holders",{"_index":551,"title":{},"body":{"license.html":{}}}],["holds",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["horizontal",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":375,"title":{},"body":{"directives/WindowDirective.html":{}}}],["hostbinding",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ifspandirective",{"_index":12,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["ignore",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implement",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["implied",{"_index":541,"title":{},"body":{"license.html":{}}}],["import",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":484,"title":{},"body":{"index.html":{}}}],["included",{"_index":535,"title":{},"body":{"license.html":{}}}],["including",{"_index":516,"title":{},"body":{"license.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":222,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["init",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["initial",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":173,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":174,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":482,"title":{},"body":{"index.html":{}}}],["instead",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["instructions",{"_index":476,"title":{},"body":{"index.html":{}}}],["interface",{"_index":220,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["interfaces",{"_index":340,"title":{},"body":{"interfaces/Window.html":{}}}],["ismultiscreen",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["js",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["kind",{"_index":539,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":501,"title":{},"body":{"license.html":{}}}],["layout",{"_index":29,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["layout.directive",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":263,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["layout.directive.ts:100",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:115",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:91",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layouts",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["layoutstyle",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][segment",{"_index":389,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":338,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][spanning",{"_index":339,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":362,"title":{},"body":{"directives/WindowDirective.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["liability",{"_index":555,"title":{},"body":{"license.html":{}}}],["liable",{"_index":552,"title":{},"body":{"license.html":{}}}],["library",{"_index":479,"title":{},"body":{"index.html":{}}}],["license",{"_index":496,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":517,"title":{},"body":{"license.html":{}}}],["limited",{"_index":542,"title":{},"body":{"license.html":{}}}],["link",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["list",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["little",{"_index":461,"title":{},"body":{"index.html":{}}}],["live",{"_index":450,"title":{},"body":{"index.html":{}}}],["look",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ma",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["map",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["map((_",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":168,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matchcondition",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matching",{"_index":46,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchmedia",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldhorizontal).matches",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldvertical).matches",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":381,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":350,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":216,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["mediaquery",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["merchantability",{"_index":544,"title":{},"body":{"license.html":{}}}],["merge",{"_index":520,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":466,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":434,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":497,"title":{},"body":{"license.html":{}}}],["mode",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":519,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["multiple",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["naming",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ng",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["ngif",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":441,"title":{},"body":{"index.html":{}}}],["none",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":548,"title":{},"body":{"license.html":{}}}],["note",{"_index":358,"title":{},"body":{"directives/WindowDirective.html":{}}}],["notice",{"_index":533,"title":{},"body":{"license.html":{}}}],["now",{"_index":472,"title":{},"body":{"index.html":{}}}],["npm",{"_index":481,"title":{},"body":{"index.html":{}}}],["null",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":371,"title":{},"body":{"directives/WindowDirective.html":{}}}],["observable",{"_index":191,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":508,"title":{},"body":{"license.html":{}}}],["ondestroy",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["one",{"_index":365,"title":{},"body":{"directives/WindowDirective.html":{}}}],["optional",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["orientation",{"_index":488,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":560,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":566,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":264,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["particular",{"_index":546,"title":{},"body":{"license.html":{}}}],["permission",{"_index":502,"title":{},"body":{"license.html":{}}}],["permit",{"_index":527,"title":{},"body":{"license.html":{}}}],["person",{"_index":507,"title":{},"body":{"license.html":{}}}],["persons",{"_index":528,"title":{},"body":{"license.html":{}}}],["pipe(skip(1",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["placed",{"_index":345,"title":{},"body":{"directives/WindowDirective.html":{}}}],["portions",{"_index":537,"title":{},"body":{"license.html":{}}}],["position",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["possible",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["private",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":420,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projects/.../if",{"_index":438,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../media",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":436,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../split",{"_index":439,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/media",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/split",{"_index":262,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":342,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:116",{"_index":372,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:119",{"_index":370,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":258,"title":{},"body":{"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["provided",{"_index":486,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["publish",{"_index":521,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":547,"title":{},"body":{"license.html":{}}}],["queries",{"_index":217,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["queries.ts",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":359,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["readonly",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["receive",{"_index":180,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["regardless",{"_index":487,"title":{},"body":{"index.html":{}}}],["relative",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rendered",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{}}}],["replaysubject",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":440,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["requires",{"_index":465,"title":{},"body":{"index.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["responsive",{"_index":459,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":515,"title":{},"body":{"license.html":{}}}],["result",{"_index":45,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["returns",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["revert",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":361,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rightmost",{"_index":364,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":518,"title":{},"body":{"license.html":{}}}],["root",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":363,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["rxjs",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["safestyle",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":357,"title":{},"body":{"directives/WindowDirective.html":{}}}],["screen",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":34,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["screencontextdata",{"_index":183,"title":{"classes/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["screencontextsubscription",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["screenspanning.horizontal",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.none",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning.vertical",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["second",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["segment",{"_index":344,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["selector",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":525,"title":{},"body":{"license.html":{}}}],["service",{"_index":177,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":444,"title":{},"body":{"index.html":{}}}],["set",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(mode",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":374,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":478,"title":{},"body":{"index.html":{}}}],["shall",{"_index":534,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["single",{"_index":72,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["singlefoldhorizontal",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["singlefoldvertical",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["skip",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["software",{"_index":510,"title":{},"body":{"license.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["span.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["span.directive.ts:58",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:67",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:75",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:79",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:94",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/enumerations.html":{}}}],["spancondition.horizontal",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":437,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["specified",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":343,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["splitlayout",{"_index":369,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["splitlayoutdirective",{"_index":14,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["splitlayoutmode",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{}}}],["splitlayoutmode.absolute",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["splitlayoutmode.flex",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["splitlayoutmode.grid",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["started",{"_index":391,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["status",{"_index":451,"title":{},"body":{"index.html":{}}}],["string",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":530,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":523,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subscribe(context",{"_index":491,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":536,"title":{},"body":{"license.html":{}}}],["such",{"_index":447,"title":{},"body":{"index.html":{}}}],["suit",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":407,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":349,"title":{},"body":{"directives/WindowDirective.html":{}}}],["surface",{"_index":448,"title":{},"body":{"index.html":{}}}],["svg",{"_index":564,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":388,"title":{},"body":{"directives/WindowDirective.html":{}}}],["switch",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["takeuntil",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":373,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":417,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thentemplateref",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.elsetemplateref",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":171,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":169,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.ismultiscreen",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":383,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":386,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":170,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":172,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":384,"title":{},"body":{"directives/WindowDirective.html":{}}}],["top",{"_index":377,"title":{},"body":{"directives/WindowDirective.html":{}}}],["tort",{"_index":559,"title":{},"body":{"license.html":{}}}],["true",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["two",{"_index":347,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{},"classes/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["uis",{"_index":460,"title":{},"body":{"index.html":{}}}],["up",{"_index":346,"title":{},"body":{"directives/WindowDirective.html":{}}}],["update",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["updates",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":166,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["usage",{"_index":480,"title":{},"body":{"index.html":{}}}],["use",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":489,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{}}}],["value",{"_index":351,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":568,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versions",{"_index":471,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["visible",{"_index":71,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["void",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["warranties",{"_index":543,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":538,"title":{},"body":{"license.html":{}}}],["web",{"_index":456,"title":{},"body":{"index.html":{}}}],["whether",{"_index":556,"title":{},"body":{"license.html":{}}}],["width",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["window",{"_index":198,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["window.directive",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.getwindowsegments",{"_index":256,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerheight",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":15,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windowsegments",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{},"classes/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":354,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":514,"title":{},"body":{"license.html":{}}}],["work",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["yohan",{"_index":500,"title":{},"body":{"license.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi screen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi screen devices.\n *\n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n  exports: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n})\nexport class FoldableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            This text will only be visible on multi screen devices.\n                        \n                        \n                            This text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:58\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:75\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false. \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:67\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true. \n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:94\n                \n            \n\n\n            \n                \n                    ignore \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:58\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:67\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:75\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Possible spanning mode conditions for use with {@link IfSpanDirective}.\n */\nexport enum SpanCondition {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical = 'fold-vertical',\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal = 'fold-horizontal',\n  /** No screen spanning (single screen mode). */\n  None = 'none',\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi = 'multi',\n}\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n *\n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n *\n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]',\n})\nexport class IfSpanDirective implements OnDestroy {\n  private screenContextSubscription: Subscription = null;\n  private condition: SpanCondition;\n  private thenTemplateRef: TemplateRef | null = null;\n  private elseTemplateRef: TemplateRef | null = null;\n  private thenViewRef: EmbeddedViewRef | null = null;\n  private elseViewRef: EmbeddedViewRef | null = null;\n\n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   *\n   * @param condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef | null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef | null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    private viewContainer: ViewContainerRef,\n    templateRef: TemplateRef\n  ) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .pipe(skip(1))\n      .subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.Horizontal;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.Vertical;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(\n            this.thenTemplateRef\n          );\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(\n            this.elseTemplateRef\n          );\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's screen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObject\n                        \n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:92\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                        Returns :         ScreenContextData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObservable\n                        \n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:85\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:64\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:71\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:78\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport class ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(\n    `${singleFoldHorizontal}, ${singleFoldVertical}`\n  );\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map((_) => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments() {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScreenContextData.html":{"url":"classes/ScreenContextData.html","title":"class - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                isMultiScreen\n                            \n                            \n                                    Readonly\n                                screenSpanning\n                            \n                            \n                                    Readonly\n                                windowSegments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            isMultiScreen\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/lib/src/core/screen-context.ts:22\n                            \n                        \n\n                \n                    \n                        True is current device have multiple screens available. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            screenSpanning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ScreenSpanning\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/lib/src/core/screen-context.ts:20\n                            \n                        \n\n                \n                    \n                        The current screen spanning mode. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            windowSegments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DOMRect[]\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/lib/src/core/screen-context.ts:18\n                            \n                        \n\n                \n                    \n                        The list of available window segments. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport class ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(\n    `${singleFoldHorizontal}, ${singleFoldVertical}`\n  );\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map((_) => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments() {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your design.\nThis directive should be used along with WindowDirective.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:100\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:91\n                            \n                        \n                \n                    \n                        Sets the current split layout mode to use when multi screen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(mode)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:91\n                                \n                            \n                    \n                        \n                                Sets the current split layout mode to use when multi screen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            mode\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout mode to use.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:115\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n */\nexport enum SplitLayoutMode {\n  Flex = 'flex',\n  Grid = 'grid',\n  Absolute = 'absolute',\n}\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {\n      flexDirection: 'row',\n    },\n    [ScreenSpanning.Horizontal]: {\n      flexDirection: 'column',\n    },\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'env(fold-width)',\n    },\n    [ScreenSpanning.Horizontal]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'env(fold-height)',\n    },\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: '100%',\n    },\n  },\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your design.\n *\n * This directive should be used along with {@link WindowDirective}.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdSplitLayout]',\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private layoutStyle: SafeStyle;\n  private screenContextSubscription: Subscription = null;\n\n  /**\n   * Sets the current split layout mode to use when multi screen is detected.\n   *\n   * @param mode The split layout mode to use.\n   */\n  @Input()\n  set fdSplitLayout(mode: SplitLayoutMode) {\n    this.mode = mode || SplitLayoutMode.Flex;\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(private screenContext: ScreenContext) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .pipe(skip(1))\n      .subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   *\n   * @return The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    if (isMultiScreen) {\n      const spanning = this.screenContext.screenSpanning;\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][spanning],\n      };\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        getWindowSegments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport class ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(\n    `${singleFoldHorizontal}, ${singleFoldVertical}`\n  );\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map((_) => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments() {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple container\nelement to the same window segment.\nNote that if you have set the read direction to Right-To-Left mode (rtl) in CSS,\nthe first segment will be the rightmost one.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:119\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                    SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:116\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi screen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment: number)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:116\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi screen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport {\n  SplitLayoutDirective,\n  SplitLayoutMode,\n} from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.Vertical]: [\n      { flex: '0 1 env(fold-left)' },\n      { flex: '0 1 calc(100vw - env(fold-right))' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { flex: '0 1 env(fold-top)' },\n      { flex: '0 1 calc(100vh - env(fold-bottom))' },\n    ],\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.Vertical]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.Vertical]: [\n      {\n        position: 'absolute',\n        left: 0,\n        right: 'calc(100vw - env(fold-left))',\n      },\n      {\n        position: 'absolute',\n        left: 'env(fold-right)',\n        right: 0,\n      },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'env(fold-top)',\n      },\n      {\n        position: 'absolute',\n        top: 'env(fold-bottom)',\n        width: '100%',\n        maxHeight: 'calc(100vh - env(fold-bottom))',\n      },\n    ],\n  },\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n *\n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple container\n * element to the same window segment.\n *\n * Note that if you have set the read direction to Right-To-Left mode (`rtl`) in CSS,\n * the first segment will be the rightmost one.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]',\n})\nexport class WindowDirective implements OnDestroy {\n  private segment = -1;\n  private layoutStyle: SafeStyle;\n  private screenContextSubscription: Subscription = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi screen is detected.\n   *\n   * @param segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number) {\n    this.segment = segment;\n    this.updateStyle();\n  }\n\n  constructor(\n    private element: ElementRef,\n    private screenContext: ScreenContext,\n    @Host() private splitLayout: SplitLayoutDirective\n  ) {\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .pipe(skip(1))\n      .subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n\n    if (isMultiScreen) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n\n      const mode = this.splitLayout.layoutMode;\n      const spanning = this.screenContext.screenSpanning;\n\n      const direction = getComputedStyle(this.element.nativeElement)?.direction;\n      // Swap segments for vertical span and RTL mode\n      const segment =\n        spanning === ScreenSpanning.Vertical && direction === 'rtl'\n          ? 1 - this.segment\n          : this.segment;\n\n      this.layoutStyle = layoutStyles[mode][spanning][segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.0.0 (2021-03-11)\nBug Fixes\n\ndirectives export (536764f)\nfdIfSpan init (7e66b70)\nrevert naming changes (3ee5543)\n\nFeatures\n\nadd RTL support (8bdb155)\nadd ScreenContext first value and fix span check (487885f)\nadd SplitLayout directive (9fadf70)\nadd support for grid and absolute layouts (582e83e)\nadd Window directive (b2a3632)\ndemo test (90ad184)\nfinish demo project (db13ef1)\nimplement fdIfSpan directive (083b648)\nimplement ScreenContext service (466a9d7)\ninitial commit (9ff473a)\ninitial work on service API (962620d)\nupdate to ng 11 (4708aff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/screen-spanning.ts\n    \n        \n            \n                \n                    \n                        \n                        ScreenSpanning\n                    \n                \n                    \n                        \n                            Represents the screen spanning mode.\n\n                        \n                    \n                        \n                            \n                                 Vertical\n                            \n                        \n                        \n                            \n                                Value : fold-vertical\n                            \n                        \n                        \n                            \n                                 Horizontal\n                            \n                        \n                        \n                            \n                                Value : fold-horizontal\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    projects/lib/src/core/if-span.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        SpanCondition\n                    \n                \n                    \n                        \n                            Possible spanning mode conditions for use with IfSpanDirective.\n\n                        \n                    \n                        \n                            \n                                 Vertical\n                            \n                        \n                        \n                            \n                                Value : fold-vertical\n                            \n                        \n                        \n                            \n                                 Horizontal\n                            \n                        \n                        \n                            \n                                Value : fold-horizontal\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 Multi\n                            \n                        \n                        \n                            \n                                Value : multi\n                            \n                        \n            \n        \n\n    projects/lib/src/core/split-layout.directive.ts\n    \n        \n            \n                \n                    \n                        \n                        SplitLayoutMode\n                    \n                \n                    \n                        \n                            Defines how the split layout container should be rendered when multi screen\nis detected.\n\n                        \n                    \n                        \n                            \n                                 Flex\n                            \n                        \n                        \n                            \n                                Value : flex\n                            \n                        \n                        \n                            \n                                 Grid\n                            \n                        \n                        \n                            \n                                Value : grid\n                            \n                        \n                        \n                            \n                                 Absolute\n                            \n                        \n                        \n                            \n                                Value : absolute\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📖 ngx-foldable\n\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\n\n  \n\n\nSee the Live Demo\nStatus\nThis is currently an experimental project aiming to explore how existing web apps could be adapted to build responsive UIs on dual-screen devices, with as little changes as possible on the code.\nHow to test on your browser\nThe dual-screen emulation feature requires Microsoft Edge or Google Chrome canary versions for now, with experimental flags to enable.\nFollow the instructions here to setup your browser for dual-screen emulation.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n\n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on horizontal fold spanning.\n    This is only visible on vertical fold spanning.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe(context: ScreenContextData) {\n        console.log('Screen context changed:', context);\n      }\n  }\n}You can read the full documentation here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            singleFoldHorizontal   (projects/.../media-queries.ts)\n                        \n                        \n                            singleFoldVertical   (projects/.../media-queries.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/media-queries.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldHorizontal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-horizontal)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold horizontal screen mode. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldVertical\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-vertical)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold vertical screen mode. \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
