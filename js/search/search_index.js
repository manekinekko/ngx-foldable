var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.551,1,1.07]],["body/modules/FoldableModule.html",[0,2.52,1,2.078,2,1.767,3,2.175,4,2.175,5,3.102,6,2.175,7,2.175,8,3.102,9,2.175,10,2.175,11,2.175,12,1.739,13,0.072,14,1.441,15,2.086,16,2.804,17,2.175,18,1.462,19,0.842,20,0.69,21,0.842,22,2.796,23,1.015,24,3.603,25,3.603,26,2.804,27,2.804,28,2.804,29,1.308,30,1.085,31,0.558,32,1.57,33,1.085,34,0.558,35,1.039,36,2.804,37,0.842,38,2.796,39,2.796,40,1.218,41,2.175,42,1.268,43,0.555,44,0.69,45,0.041,46,0.053,47,0.041]],["title/directives/IfSpanDirective.html",[12,0.892,48,0.739]],["body/directives/IfSpanDirective.html",[12,1.164,13,0.073,19,0.459,20,0.376,21,0.459,23,0.852,30,1.182,31,0.685,32,1.592,34,0.566,35,0.853,37,0.459,42,0.965,43,0.567,44,0.376,45,0.022,46,0.035,47,0.022,48,0.706,49,0.554,50,2.545,51,0.964,52,2.345,53,4.298,54,1.022,55,0.862,56,1.072,57,2.345,58,2.345,59,2.683,60,2.345,61,2.345,62,2.345,63,2.345,64,2.345,65,1.493,66,2.345,67,0.852,68,1.037,69,1.493,70,3.653,71,2.842,72,1.508,73,0.964,74,1.482,75,2.309,76,0.303,77,1.825,78,1.164,79,1.482,80,3.206,81,3.206,82,1.226,83,0.852,84,1.187,85,2.856,86,3.206,87,4.424,88,2.053,89,1.525,90,2.026,91,2.026,92,0.706,93,2.026,94,2.345,95,4.424,96,1.805,97,2.856,98,2.345,99,3.653,100,2.309,101,3.653,102,2.856,103,2.345,104,1.493,105,1.525,106,1.482,107,1.676,108,2.026,109,1.525,110,2.345,111,1.525,112,1.525,113,2.856,114,2.026,115,1.482,116,0.554,117,0.964,118,0.554,119,0.459,120,0.376,121,1.226,122,0.852,123,1.91,124,1.397,125,1.676,126,1.805,127,0.964,128,0.964,129,0.852,130,1.187,131,1.493,132,0.964,133,2.853,134,1.525,135,1.525,136,1.525,137,1.525,138,0.964,139,1.493,140,1.525,141,2.856,142,3.206,143,1.525,144,3.206,145,3.46,146,1.525,147,2.856,148,1.482,149,0.459,150,0.459,151,0.964,152,0.964,153,0.964,154,1.525,155,1.525,156,2.856,157,1.525,158,1.164,159,0.964,160,1.525,161,1.805,162,0.554,163,1.525,164,0.554,165,1.187,166,0.554,167,1.525,168,2.345,169,1.525,170,2.345,171,2.856,172,2.345]],["title/injectables/ScreenContext.html",[34,0.38,173,1.07]],["body/injectables/ScreenContext.html",[13,0.073,19,0.573,20,0.469,21,0.573,23,0.691,31,0.682,33,0.833,34,0.505,35,0.938,37,0.573,42,0.573,43,0.549,44,0.469,45,0.028,46,0.041,47,0.028,54,1.893,55,0.71,56,0.804,65,1.704,67,0.691,68,1.004,76,0.377,77,2.152,78,0.691,82,1.446,83,1.184,88,2.074,104,1.704,107,1.988,116,0.691,118,0.691,119,1.232,120,1.097,129,1.004,131,1.487,149,0.833,150,1.077,158,1.616,162,0.691,164,0.691,166,1.004,173,1.205,174,1.902,175,1.784,176,1.202,177,1.205,178,1.748,179,1.446,180,1.446,181,1.446,182,1.748,183,1.827,184,2.261,185,2.507,186,1.656,187,1.902,188,1.902,189,2.261,190,1.902,191,2.507,192,1.748,193,1.205,194,2.261,195,1.902,196,2.06,197,1.728,198,1.144,199,1.704,200,2.507,201,1.748,202,1.902,203,1.902,204,1.902,205,1.299,206,1.704,207,2.06,208,1.202,209,1.748,210,1.202,211,1.202,212,1.202,213,1.202,214,1.446,215,1.446,216,0.995,217,1.202,218,1.202,219,1.202,220,1.205,221,1.202,222,1.202,223,2.06,224,1.202,225,1.202,226,1.202,227,1.202,228,1.202,229,1.202,230,1.446,231,1.202,232,2.261,233,1.748,234,1.202,235,1.202,236,1.202,237,1.202,238,1.202,239,1.202,240,1.202,241,1.202,242,1.202,243,1.202,244,1.202,245,1.202,246,1.202,247,1.202,248,1.202,249,1.202,250,1.202,251,1.202,252,1.202,253,1.202,254,1.202,255,1.202,256,1.202]],["title/interfaces/ScreenContextData.html",[183,1.07,220,1.07]],["body/interfaces/ScreenContextData.html",[13,0.073,19,0.609,20,0.499,21,0.609,23,0.735,31,0.672,33,0.609,34,0.448,35,0.961,37,0.609,42,0.609,43,0.574,44,0.499,45,0.03,46,0.043,47,0.03,54,1.858,55,0.73,56,0.832,65,1.925,67,0.735,68,1.05,76,0.401,78,0.735,83,0.735,92,1.016,104,1.764,116,0.735,118,0.735,119,1.172,120,1.128,129,1.05,131,1.514,149,0.87,150,0.609,158,1.635,162,0.735,164,0.735,166,1.05,173,1.26,175,0.882,176,1.279,177,0.882,178,1.279,179,1.058,180,1.058,181,1.058,182,1.279,183,1.817,184,1.279,185,2.635,186,1.765,189,1.828,191,2.327,192,1.279,193,0.882,194,2.133,196,2.133,197,1.765,198,1.172,199,1.764,200,2.635,201,1.279,205,1.414,206,1.764,207,2.133,208,1.279,209,1.828,210,1.279,211,1.279,212,1.279,213,1.279,214,1.512,215,1.512,216,1.058,217,1.279,218,1.279,219,1.279,220,1.26,221,1.828,222,1.828,223,2.133,224,1.279,225,1.279,226,1.279,227,1.279,228,1.279,229,1.279,230,1.512,231,1.279,232,2.327,233,1.828,234,1.279,235,1.279,236,1.279,237,1.279,238,1.279,239,1.279,240,1.279,241,1.279,242,1.279,243,1.279,244,1.279,245,1.279,246,1.279,247,1.279,248,1.279,249,1.279,250,1.279,251,1.279,252,1.279,253,1.279,254,1.279,255,1.279,256,1.279,257,1.279,258,2.25]],["title/directives/SplitLayoutDirective.html",[14,0.739,48,0.739]],["body/directives/SplitLayoutDirective.html",[13,0.073,14,1.008,15,1.09,19,0.5,20,0.41,21,0.5,23,0.909,29,1.631,30,1.214,31,0.696,32,1.09,33,0.5,34,0.585,35,0.931,37,0.5,40,1.885,42,1.008,43,0.597,44,0.41,45,0.024,46,0.037,47,0.024,48,1.008,49,0.603,54,1.645,55,0.597,56,1.067,67,0.909,68,1.093,69,1.308,72,1.09,73,1.05,74,1.581,76,0.33,78,0.603,79,1.581,82,1.308,83,0.603,84,1.293,88,1.751,90,1.581,91,1.581,92,0.753,93,1.581,96,1.902,106,1.902,107,1.308,108,1.05,114,1.581,115,1.581,116,0.603,117,1.05,118,0.603,119,0.5,120,0.41,122,1.465,127,1.05,128,1.05,129,1.216,131,1.216,132,1.05,133,1.902,138,1.05,139,0.869,148,1.581,149,0.5,150,0.5,151,1.05,152,1.05,153,1.05,158,1.093,159,1.05,161,1.05,162,1.093,164,1.093,166,0.603,186,1.09,197,1.09,205,0.909,259,2.271,260,1.05,261,2.502,262,1.902,263,2.502,264,2.117,265,1.947,266,2.342,267,1.947,268,2.502,269,3.01,270,2.502,271,2.233,272,2.502,273,2.502,274,2.502,275,2.117,276,1.308,277,1.581,278,2.938,279,3.01,280,1.661,281,2.502,282,2.342,283,2.386,284,1.661,285,1.661,286,1.661,287,1.293,288,2.342,289,1.293,290,0.869,291,1.293,292,1.751,293,1.751,294,1.311,295,1.293,296,1.293,297,1.293,298,1.293,299,0.869,300,1.293,301,1.293,302,2.342,303,3.01,304,1.947,305,1.661,306,1.661,307,3.349,308,2.342,309,2.502,310,3.01,311,1.661,312,1.293,313,1.661,314,3.349,315,2.502,316,1.947,317,1.947,318,2.502,319,1.661,320,1.947,321,1.293,322,1.661,323,1.661,324,1.293,325,1.293,326,1.661,327,1.293,328,1.661,329,2.502,330,2.342,331,1.293,332,1.293,333,2.342,334,1.293,335,1.293,336,1.661,337,1.661]],["title/interfaces/Window.html",[198,0.739,220,1.07]],["body/interfaces/Window.html",[13,0.074,19,0.638,20,0.523,21,0.638,31,0.655,33,0.638,34,0.463,35,0.978,37,0.638,42,0.638,43,0.593,44,0.523,45,0.031,46,0.044,47,0.031,54,1.792,55,0.687,56,0.738,65,1.563,67,0.77,68,1.086,76,0.421,78,0.77,83,0.77,92,0.638,104,1.563,116,0.77,118,0.77,119,1.132,120,1.083,129,1.086,131,1.535,149,0.9,150,0.638,158,1.649,162,0.77,164,0.77,166,1.086,173,1.303,175,0.924,176,1.34,177,0.924,178,1.34,179,1.109,180,1.109,181,1.109,182,1.34,183,1.792,184,1.34,185,2.377,186,1.509,189,1.89,191,2.377,192,1.34,193,0.924,194,2.6,196,1.89,197,1.639,198,1.194,199,1.563,200,2.506,201,1.34,205,1.258,206,1.563,207,1.89,208,1.34,209,1.89,210,1.34,211,1.34,212,1.34,213,1.34,214,1.563,215,1.563,216,1.109,217,1.34,218,1.34,219,1.34,220,1.303,221,1.34,222,1.34,223,2.189,224,1.34,225,1.34,226,1.34,227,1.34,228,1.34,229,1.34,230,1.563,231,1.34,232,2.377,233,1.89,234,1.34,235,1.34,236,1.34,237,1.34,238,1.34,239,1.34,240,1.34,241,1.34,242,1.34,243,1.34,244,1.34,245,1.34,246,1.34,247,1.34,248,1.34,249,1.34,250,1.34,251,1.34,252,1.34,253,1.34,254,1.34,255,1.34,256,1.34,257,1.34,258,2.327,338,2.99]],["title/directives/WindowDirective.html",[15,1.07,48,0.739]],["body/directives/WindowDirective.html",[13,0.073,14,1.099,15,1.021,19,0.459,20,0.376,21,0.459,23,0.851,29,0.851,30,1.041,31,0.679,32,1.396,34,0.589,35,0.938,37,0.459,40,0.664,41,1.186,42,0.705,43,0.302,44,0.376,45,0.022,46,0.034,47,0.022,48,1.099,49,0.553,55,0.636,56,0.79,67,0.851,68,1.037,69,1.225,72,1.021,73,0.963,74,1.481,76,0.465,78,0.553,79,1.481,82,1.225,83,0.851,88,1.492,90,1.481,91,1.481,92,0.459,93,1.481,100,0.963,106,1.804,107,0.797,108,0.963,114,1.481,115,1.481,116,0.553,117,0.963,118,0.553,119,0.459,120,0.376,124,0.664,129,1.326,131,1.381,132,0.963,133,1.804,138,0.963,139,1.988,148,1.481,149,0.459,150,0.459,151,0.963,152,0.963,153,0.963,158,0.553,159,0.963,161,0.963,162,1.037,164,1.164,166,0.553,186,1.021,197,1.021,198,1.259,199,0.797,205,0.851,206,1.225,230,0.797,262,2.404,264,2.308,265,1.823,266,2.691,267,1.823,271,1.492,275,2.025,276,1.675,277,1.481,282,2.221,283,1.804,287,1.186,288,2.221,289,1.186,290,0.797,292,1.675,294,1.591,296,1.186,297,1.186,298,1.186,299,0.797,300,1.186,301,1.186,302,1.186,304,2.221,308,1.823,312,1.186,316,1.823,317,1.823,320,3.133,321,1.823,324,1.186,325,2.493,327,1.186,330,1.823,331,1.186,332,1.186,333,2.221,335,1.186,339,1.524,340,2.343,341,3.512,342,2.343,343,2.343,344,2.343,345,1.823,346,2.343,347,2.343,348,1.481,349,4.244,350,3.302,351,2.343,352,2.343,353,3.204,354,2.343,355,2.343,356,1.823,357,3.204,358,3.651,359,3.651,360,2.493,361,2.343,362,2.343,363,2.841,364,1.524,365,3.204,366,2.221,367,1.524,368,2.343,369,3.458,370,1.524,371,2.343,372,2.343,373,3.204,374,2.343,375,2.854,376,3.204,377,2.343,378,1.524,379,1.524,380,1.823,381,3.204,382,1.524,383,1.524,384,1.524,385,1.524,386,1.524,387,1.524,388,1.524,389,1.524,390,1.524]],["title/changelog.html",[391,1.309,392,1.309,393,2.071]],["body/changelog.html",[13,0.056,34,0.59,43,0.606,45,0.045,46,0.056,47,0.045,48,1.25,49,1.109,75,2.408,100,1.929,177,1.66,193,1.33,198,0.919,276,1.596,293,1.596,294,1.33,299,1.992,348,1.929,360,2.375,366,2.375,394,3.053,395,3.384,396,4.349,397,3.81,398,4.349,399,4.349,400,3.81,401,3.81,402,3.81,403,3.053,404,3.053,405,3.053,406,3.053,407,4.153,408,3.053,409,3.053,410,3.053,411,3.053,412,3.053,413,3.053,414,3.053,415,3.053,416,3.053,417,3.053,418,3.053,419,3.483,420,2.964,421,3.053,422,3.053,423,2.375,424,3.053,425,3.053,426,3.053,427,3.053,428,3.053,429,2.964,430,2.375,431,3.053,432,3.053,433,2.375,434,3.053,435,3.81,436,3.053,437,3.053,438,3.81,439,3.053,440,3.053,441,2.375,442,3.053,443,3.053,444,3.053,445,3.053]],["title/index.html",[76,0.411,391,1.309,392,1.309]],["body/index.html",[1,1.456,13,0.071,18,1.303,20,0.615,26,1.94,27,2.933,28,1.94,29,0.905,30,1.212,31,0.723,32,1.642,33,1.006,34,0.624,35,0.824,36,1.94,43,0.663,44,0.824,45,0.037,46,0.049,47,0.037,49,0.905,55,0.663,69,1.303,71,3.267,72,1.456,75,1.575,119,1.135,122,0.905,123,1.747,124,1.086,125,1.303,139,1.303,149,0.75,150,0.75,177,1.086,180,1.303,181,1.303,183,1.086,193,1.456,198,1.006,205,1.525,275,2.112,276,1.303,277,1.575,278,1.94,290,1.747,299,1.303,334,1.94,341,2.6,345,1.94,356,2.6,363,1.94,419,1.94,423,1.94,429,2.6,430,1.94,433,2.6,441,1.94,446,4.199,447,4.415,448,2.492,449,2.492,450,4.199,451,2.492,452,2.492,453,2.492,454,2.492,455,2.492,456,3.341,457,2.6,458,3.341,459,2.492,460,2.492,461,2.492,462,2.492,463,2.492,464,2.492,465,2.492,466,2.492,467,2.492,468,3.341,469,2.492,470,2.492,471,2.492,472,2.492,473,3.341,474,2.492,475,2.492,476,2.492,477,2.492,478,2.492,479,3.341,480,2.492,481,2.492,482,2.492,483,2.492,484,2.492,485,2.492,486,3.341,487,4.199,488,3.341,489,2.492,490,2.492,491,2.492,492,2.492,493,2.492,494,1.94,495,2.492,496,2.492,497,2.492,498,2.492,499,2.492,500,2.492,501,2.492,502,2.492,503,3.341,504,2.492,505,2.492,506,2.492,507,2.492,508,2.492]],["title/license.html",[391,1.309,392,1.309,509,1.612]],["body/license.html",[13,0.057,18,1.616,45,0.046,46,0.057,47,0.046,121,1.616,122,1.394,395,2.405,457,2.405,494,2.405,509,2.405,510,3.839,511,4.176,512,3.091,513,3.091,514,3.091,515,3.839,516,3.091,517,3.091,518,3.091,519,3.091,520,3.091,521,3.091,522,3.839,523,4.73,524,3.091,525,3.091,526,3.091,527,4.176,528,3.091,529,3.839,530,3.091,531,3.091,532,3.091,533,3.091,534,3.091,535,3.091,536,3.091,537,3.091,538,3.091,539,3.839,540,3.091,541,3.091,542,3.091,543,3.091,544,3.091,545,3.091,546,3.839,547,3.839,548,3.091,549,3.091,550,3.091,551,3.091,552,3.091,553,3.091,554,3.091,555,3.091,556,3.091,557,3.091,558,3.091,559,3.091,560,3.091,561,3.091,562,3.091,563,3.091,564,3.091,565,3.091,566,3.091,567,3.091,568,3.091,569,3.091,570,3.091,571,3.091,572,3.091,573,3.091,574,3.091,575,3.091,576,3.091]],["title/modules.html",[2,2.09]],["body/modules.html",[1,1.646,2,2.388,13,0.064,45,0.056,46,0.064,47,0.056,290,1.976,420,2.94,577,3.778,578,3.778]],["title/overview.html",[579,2.573]],["body/overview.html",[0,2.534,1,2.106,3,2.581,4,2.581,5,2.581,6,2.581,7,2.581,8,2.581,9,2.581,10,2.581,11,2.581,12,1.711,13,0.07,14,1.418,15,2.053,16,3.12,17,2.581,18,1.734,45,0.049,46,0.059,47,0.049,49,1.205,173,1.445,257,2.096,350,3.12,579,2.581,580,3.317,581,3.317]],["title/miscellaneous/typealiases.html",[582,1.083,583,2.941]],["body/miscellaneous/typealiases.html",[12,1.202,13,0.07,14,0.996,29,1.202,30,1.205,31,0.62,33,0.996,40,1.442,45,0.049,46,0.059,47,0.049,50,2.092,51,2.53,55,0.794,56,0.988,59,2.53,76,0.657,92,0.996,96,2.092,120,0.988,121,1.731,122,1.202,123,2.339,124,1.744,125,2.093,126,2.53,175,1.442,259,2.092,260,2.53,262,2.092,271,2.093,283,2.092,291,2.575,292,1.731,293,1.731,294,1.442,582,1.731,584,3.31,585,2.575,586,3.115,587,2.575,588,2.575,589,3.31]],["title/miscellaneous/variables.html",[582,1.083,590,2.288]],["body/miscellaneous/variables.html",[12,0.916,13,0.072,14,0.759,29,0.916,30,1.141,31,0.735,40,1.099,45,0.037,46,0.05,47,0.037,50,1.594,51,2.128,55,0.92,56,1.153,59,2.741,72,2.005,76,0.5,92,1.269,120,1.04,121,1.319,122,1.223,123,2.443,124,1.96,125,2.352,126,2.557,127,2.396,128,2.396,130,1.962,165,3.28,175,1.099,179,1.761,214,1.761,215,1.761,216,1.761,259,1.594,260,2.128,264,2.128,271,2.204,292,1.761,293,1.761,294,1.467,295,1.962,348,2.664,380,2.62,582,1.319,585,1.962,586,2.62,587,1.962,588,1.962,590,1.962,591,3.367,592,3.791,593,3.791,594,2.522,595,3.367]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":349,"title":{},"body":{"directives/WindowDirective.html":{}}}],["03",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["083b648",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":350,"title":{},"body":{"directives/WindowDirective.html":{},"overview.html":{}}}],["1.0.0",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":384,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["11",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["1fr",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2",{"_index":581,"title":{},"body":{"overview.html":{}}}],["2021",{"_index":395,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":580,"title":{},"body":{"overview.html":{}}}],["3ee5543",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["466a9d7",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["4708aff",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["487885f",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["4aa85c7",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["536764f",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["582e83e",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["7e66b70",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["8bdb155",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["90ad184",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["962620d",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["9fadf70",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["9ff473a",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["above",{"_index":545,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accepts",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":570,"title":{},"body":{"license.html":{}}}],["active",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["adapted",{"_index":481,"title":{},"body":{"index.html":{}}}],["add",{"_index":419,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["added",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["aiming",{"_index":476,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":584,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":178,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":537,"title":{},"body":{"license.html":{}}}],["angular",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["angular/core",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["api",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":498,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":493,"title":{},"body":{"index.html":{}}}],["apps",{"_index":480,"title":{},"body":{"index.html":{}}}],["arising",{"_index":574,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":184,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["assign",{"_index":352,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":524,"title":{},"body":{"license.html":{}}}],["authors",{"_index":563,"title":{},"body":{"license.html":{}}}],["available",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["b1c68ac",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["b2a3632",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["behaves",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["between",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["boolean",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["bottom",{"_index":375,"title":{},"body":{"directives/WindowDirective.html":{}}}],["browse",{"_index":578,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"modules.html":{}}}],["bug",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["built",{"_index":505,"title":{},"body":{"index.html":{}}}],["c",{"_index":512,"title":{},"body":{"license.html":{}}}],["calc(100vh",{"_index":374,"title":{},"body":{"directives/WindowDirective.html":{}}}],["calc(100vw",{"_index":372,"title":{},"body":{"directives/WindowDirective.html":{}}}],["canary",{"_index":465,"title":{},"body":{"index.html":{}}}],["case",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["change",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["change').pipe",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["changed",{"_index":501,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":393,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":193,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":519,"title":{},"body":{"license.html":{}}}],["check",{"_index":423,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["choose",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":464,"title":{},"body":{"index.html":{}}}],["claim",{"_index":566,"title":{},"body":{"license.html":{}}}],["class",{"_index":44,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["cluster_foldablemodule",{"_index":9,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":10,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":486,"title":{},"body":{"index.html":{}}}],["column",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["commit",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["components",{"_index":448,"title":{},"body":{"index.html":{}}}],["condition",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":575,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":500,"title":{},"body":{"index.html":{}}}],["const",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(element",{"_index":364,"title":{},"body":{"directives/WindowDirective.html":{}}}],["constructor(private",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["constructor(screencontext",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{}}}],["container",{"_index":262,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["contains",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["context.ts",{"_index":176,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:40",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:65",{"_index":195,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:72",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:79",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:86",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:93",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":571,"title":{},"body":{"license.html":{}}}],["copies",{"_index":539,"title":{},"body":{"license.html":{}}}],["copy",{"_index":522,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":511,"title":{},"body":{"license.html":{}}}],["creating",{"_index":263,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["current",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":345,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["d383609",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":567,"title":{},"body":{"license.html":{}}}],["db13ef1",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":526,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":576,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["declare",{"_index":218,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["demo",{"_index":429,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["demos",{"_index":507,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["deployment",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["design",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["device",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["devices/demos",{"_index":506,"title":{},"body":{"index.html":{}}}],["different",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["direction",{"_index":357,"title":{},"body":{"directives/WindowDirective.html":{}}}],["directive",{"_index":48,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["directives",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":535,"title":{},"body":{"license.html":{}}}],["docs",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":457,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":200,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":450,"title":{},"body":{"index.html":{}}}],["duo",{"_index":454,"title":{},"body":{"index.html":{}}}],["edge",{"_index":462,"title":{},"body":{"index.html":{}}}],["element",{"_index":353,"title":{},"body":{"directives/WindowDirective.html":{}}}],["elementref",{"_index":365,"title":{},"body":{"directives/WindowDirective.html":{}}}],["elsetemplateref",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":192,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":458,"title":{},"body":{"index.html":{}}}],["enable",{"_index":470,"title":{},"body":{"index.html":{}}}],["enumeration",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["env(fold",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":386,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":562,"title":{},"body":{"license.html":{}}}],["example",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["existing",{"_index":478,"title":{},"body":{"index.html":{}}}],["experiences",{"_index":451,"title":{},"body":{"index.html":{}}}],["experimental",{"_index":468,"title":{},"body":{"index.html":{}}}],["explore",{"_index":477,"title":{},"body":{"index.html":{}}}],["export",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["express",{"_index":553,"title":{},"body":{"license.html":{}}}],["expression",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["false",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspan",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(mode",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":363,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":378,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":459,"title":{},"body":{"index.html":{}}}],["features",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":525,"title":{},"body":{"license.html":{}}}],["finish",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":558,"title":{},"body":{"license.html":{}}}],["fix",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["flags",{"_index":469,"title":{},"body":{"index.html":{}}}],["flex",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["flexdirection",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fold",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["foldable",{"_index":447,"title":{},"body":{"index.html":{}}}],["foldableimport",{"_index":491,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["foldables",{"_index":508,"title":{},"body":{"index.html":{}}}],["follow",{"_index":471,"title":{},"body":{"index.html":{}}}],["following",{"_index":544,"title":{},"body":{"license.html":{}}}],["free",{"_index":518,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(this.mediaquery",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":456,"title":{},"body":{"index.html":{}}}],["function",{"_index":338,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":542,"title":{},"body":{"license.html":{}}}],["getcomputedstyle(this.element.nativeelement)?.direction",{"_index":388,"title":{},"body":{"directives/WindowDirective.html":{}}}],["getismultiscreen",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":391,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getwindowsegments",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["global",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":463,"title":{},"body":{"index.html":{}}}],["granted",{"_index":517,"title":{},"body":{"license.html":{}}}],["grid",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gridarea",{"_index":376,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["help",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["here",{"_index":473,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":516,"title":{},"body":{"license.html":{}}}],["holders",{"_index":564,"title":{},"body":{"license.html":{}}}],["holds",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["horizontal",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":371,"title":{},"body":{"directives/WindowDirective.html":{}}}],["hostbinding",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ifspandirective",{"_index":12,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implement",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["implied",{"_index":554,"title":{},"body":{"license.html":{}}}],["import",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":492,"title":{},"body":{"index.html":{}}}],["included",{"_index":548,"title":{},"body":{"license.html":{}}}],["including",{"_index":529,"title":{},"body":{"license.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":222,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["init",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["initial",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":173,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":174,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":490,"title":{},"body":{"index.html":{}}}],["instead",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["instructions",{"_index":472,"title":{},"body":{"index.html":{}}}],["interface",{"_index":220,"title":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["interfaces",{"_index":257,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["ismultiscreen",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["js",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["kind",{"_index":552,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":514,"title":{},"body":{"license.html":{}}}],["layout",{"_index":29,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":260,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive.ts:101",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:110",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:125",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layouts",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["layoutstyle",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][segment",{"_index":390,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][spanning",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":359,"title":{},"body":{"directives/WindowDirective.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["liability",{"_index":568,"title":{},"body":{"license.html":{}}}],["liable",{"_index":565,"title":{},"body":{"license.html":{}}}],["library",{"_index":487,"title":{},"body":{"index.html":{}}}],["license",{"_index":509,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":530,"title":{},"body":{"license.html":{}}}],["limited",{"_index":555,"title":{},"body":{"license.html":{}}}],["link",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["list",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["little",{"_index":484,"title":{},"body":{"index.html":{}}}],["live",{"_index":455,"title":{},"body":{"index.html":{}}}],["look",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ma",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["map",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["map((_",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":168,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matchcondition",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matching",{"_index":46,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchmedia",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldhorizontal).matches",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldvertical).matches",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":377,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":347,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":216,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["mediaquery",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["merchantability",{"_index":557,"title":{},"body":{"license.html":{}}}],["merge",{"_index":533,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":461,"title":{},"body":{"index.html":{}}}],["min",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":582,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":510,"title":{},"body":{"license.html":{}}}],["mode",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":532,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["naming",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ng",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["ngif",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":446,"title":{},"body":{"index.html":{}}}],["none",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":561,"title":{},"body":{"license.html":{}}}],["note",{"_index":355,"title":{},"body":{"directives/WindowDirective.html":{}}}],["notice",{"_index":546,"title":{},"body":{"license.html":{}}}],["now",{"_index":467,"title":{},"body":{"index.html":{}}}],["npm",{"_index":489,"title":{},"body":{"index.html":{}}}],["null",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":379,"title":{},"body":{"directives/WindowDirective.html":{}}}],["object",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":191,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":521,"title":{},"body":{"license.html":{}}}],["ondestroy",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["one",{"_index":362,"title":{},"body":{"directives/WindowDirective.html":{}}}],["optional",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["orientation",{"_index":496,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":573,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":579,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":261,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parseint(segment",{"_index":383,"title":{},"body":{"directives/WindowDirective.html":{}}}],["particular",{"_index":559,"title":{},"body":{"license.html":{}}}],["permission",{"_index":515,"title":{},"body":{"license.html":{}}}],["permit",{"_index":540,"title":{},"body":{"license.html":{}}}],["person",{"_index":520,"title":{},"body":{"license.html":{}}}],["persons",{"_index":541,"title":{},"body":{"license.html":{}}}],["pipe(skip(1",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["placed",{"_index":342,"title":{},"body":{"directives/WindowDirective.html":{}}}],["portions",{"_index":550,"title":{},"body":{"license.html":{}}}],["position",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["possible",{"_index":485,"title":{},"body":{"index.html":{}}}],["private",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":433,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projects/.../if",{"_index":587,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../media",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":585,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../split",{"_index":588,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/media",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/split",{"_index":259,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":339,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:117",{"_index":368,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:121",{"_index":367,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":258,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["provided",{"_index":494,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["publish",{"_index":534,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":560,"title":{},"body":{"license.html":{}}}],["queries",{"_index":217,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["queries.ts",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["react",{"_index":503,"title":{},"body":{"index.html":{}}}],["read",{"_index":356,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["readonly",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["receive",{"_index":180,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["regardless",{"_index":495,"title":{},"body":{"index.html":{}}}],["related",{"_index":502,"title":{},"body":{"index.html":{}}}],["relative",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rendered",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["replaysubject",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["represents",{"_index":589,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requires",{"_index":460,"title":{},"body":{"index.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["responsive",{"_index":482,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":528,"title":{},"body":{"license.html":{}}}],["result",{"_index":45,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["returns",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["revert",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":358,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rightmost",{"_index":361,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":531,"title":{},"body":{"license.html":{}}}],["root",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":360,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["rxjs",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["safestyle",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":354,"title":{},"body":{"directives/WindowDirective.html":{}}}],["screen",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":34,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["screencontextdata",{"_index":183,"title":{"interfaces/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["screencontextsubscription",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screenspanning.horizontal",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.none",{"_index":166,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.vertical",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["second",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segment",{"_index":341,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["selector",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":538,"title":{},"body":{"license.html":{}}}],["service",{"_index":177,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":449,"title":{},"body":{"index.html":{}}}],["set",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(mode",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":370,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":474,"title":{},"body":{"index.html":{}}}],["shall",{"_index":547,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["similar",{"_index":504,"title":{},"body":{"index.html":{}}}],["single",{"_index":72,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["singlefoldhorizontal",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["singlefoldvertical",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["skip",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["software",{"_index":523,"title":{},"body":{"license.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["span.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["span.directive.ts:101",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:65",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:74",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:82",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:86",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spancondition.horizontal",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":586,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":340,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayout",{"_index":366,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["splitlayoutdirective",{"_index":14,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.absolute",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["splitlayoutmode.flex",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["splitlayoutmode.grid",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["started",{"_index":392,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["status",{"_index":475,"title":{},"body":{"index.html":{}}}],["string",{"_index":380,"title":{},"body":{"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":543,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":536,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subscribe(context",{"_index":499,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":549,"title":{},"body":{"license.html":{}}}],["such",{"_index":452,"title":{},"body":{"index.html":{}}}],["suit",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":420,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":346,"title":{},"body":{"directives/WindowDirective.html":{}}}],["surface",{"_index":453,"title":{},"body":{"index.html":{}}}],["svg",{"_index":577,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":389,"title":{},"body":{"directives/WindowDirective.html":{}}}],["switch",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["takeuntil",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":369,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":430,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thentemplateref",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.elsetemplateref",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":171,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":169,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.ismultiscreen",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":381,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":387,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":170,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":172,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":385,"title":{},"body":{"directives/WindowDirective.html":{}}}],["top",{"_index":373,"title":{},"body":{"directives/WindowDirective.html":{}}}],["tort",{"_index":572,"title":{},"body":{"license.html":{}}}],["true",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["two",{"_index":344,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":583,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":382,"title":{},"body":{"directives/WindowDirective.html":{}}}],["uis",{"_index":483,"title":{},"body":{"index.html":{}}}],["up",{"_index":343,"title":{},"body":{"directives/WindowDirective.html":{}}}],["update",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["updates",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":167,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["usage",{"_index":488,"title":{},"body":{"index.html":{}}}],["use",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":264,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":497,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{}}}],["value",{"_index":348,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":590,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":466,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["visible",{"_index":71,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["void",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["warranties",{"_index":556,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":551,"title":{},"body":{"license.html":{}}}],["web",{"_index":479,"title":{},"body":{"index.html":{}}}],["whether",{"_index":569,"title":{},"body":{"license.html":{}}}],["width",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["window",{"_index":198,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["window.directive",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.getwindowsegments",{"_index":256,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerheight",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":15,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windowsegments",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":351,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":527,"title":{},"body":{"license.html":{}}}],["work",{"_index":441,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yohan",{"_index":513,"title":{},"body":{"license.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi\nscreen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi\n * screen devices.\n *\n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n  exports: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n})\nexport class FoldableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            This text will only be visible on multi screen devices.\n                        \n                        \n                            This text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:65\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:82\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false. \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:74\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true. \n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:101\n                \n            \n\n\n            \n                \n                    ignore \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:65\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:74\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:82\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/** Spanning mode conditions for use with {@link IfSpanDirective}. */\nexport type SpanCondition =\n  | 'fold-vertical'\n  | 'fold-horizontal'\n  | 'none'\n  | 'multi';\n/**\n * Enumeration of spanning mode conditions values for use with\n * {@link IfSpanDirective}.\n */\nexport const SpanCondition = {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as SpanCondition,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n};\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n *\n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n *\n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]',\n})\nexport class IfSpanDirective implements OnDestroy {\n  private screenContextSubscription: Subscription | null = null;\n  private condition: SpanCondition | null = null;\n  private thenTemplateRef: TemplateRef | null = null;\n  private elseTemplateRef: TemplateRef | null = null;\n  private thenViewRef: EmbeddedViewRef | null = null;\n  private elseViewRef: EmbeddedViewRef | null = null;\n\n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   *\n   * @param condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef | null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef | null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    private viewContainer: ViewContainerRef,\n    templateRef: TemplateRef\n  ) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .pipe(skip(1))\n      .subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.Horizontal;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.Vertical;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(\n            this.thenTemplateRef\n          );\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(\n            this.elseTemplateRef\n          );\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's\nscreen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObject\n                        \n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:93\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                        Returns :         ScreenContextData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObservable\n                        \n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:86\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:65\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:72\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:79\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(\n    `${singleFoldHorizontal}, ${singleFoldVertical}`\n  );\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map((_) => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenContextData.html":{"url":"interfaces/ScreenContextData.html","title":"interface - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isMultiScreen\n                                \n                                \n                                        screenSpanning\n                                \n                                \n                                        windowSegments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isMultiScreen\n                                    \n                                \n                                \n                                    \n                                        isMultiScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True is current device have multiple screens available. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        screenSpanning\n                                    \n                                \n                                \n                                    \n                                        screenSpanning:         ScreenSpanning\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScreenSpanning\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current screen spanning mode. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        windowSegments\n                                    \n                                \n                                \n                                    \n                                        windowSegments:     DOMRect[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DOMRect[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The list of available window segments. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(\n    `${singleFoldHorizontal}, ${singleFoldVertical}`\n  );\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map((_) => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi\nscreen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your\ndesign.\nThis directive should be used along with WindowDirective.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:110\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:101\n                            \n                        \n                \n                    \n                        Sets the current split layout mode to use when multi screen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(mode)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:101\n                                \n                            \n                    \n                        \n                                Sets the current split layout mode to use when multi screen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            mode\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout mode to use.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:125\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n * See {@link SplitLayoutDirective}\n */\nexport type SplitLayoutMode = 'flex' | 'grid' | 'absolute';\n/**\n * Enumeration of split layout modes values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const SplitLayoutMode = {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n};\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {\n      flexDirection: 'row',\n    },\n    [ScreenSpanning.Horizontal]: {\n      flexDirection: 'column',\n    },\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'env(fold-width)',\n    },\n    [ScreenSpanning.Horizontal]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'env(fold-height)',\n    },\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {},\n    [ScreenSpanning.Horizontal]: {},\n  },\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi\n * screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your\n * design.\n *\n * This directive should be used along with {@link WindowDirective}.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdSplitLayout]',\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n\n  /**\n   * Sets the current split layout mode to use when multi screen is detected.\n   *\n   * @param mode The split layout mode to use.\n   */\n  @Input()\n  set fdSplitLayout(mode: SplitLayoutMode) {\n    this.mode = mode || SplitLayoutMode.Flex;\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(private screenContext: ScreenContext) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .pipe(skip(1))\n      .subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   *\n   * @return The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][spanning],\n      };\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        getWindowSegments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private mediaQuery = matchMedia(\n    `${singleFoldHorizontal}, ${singleFoldVertical}`\n  );\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = fromEvent(this.mediaQuery, 'change').pipe(\n      startWith(1),\n      map((_) => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple\ncontainer element to the same window segment.\nNote that if you have set the read direction to Right-To-Left mode (rtl)\nin CSS, the first segment will be the rightmost one.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:121\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                    SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:117\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi\nscreen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:117\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi\nscreen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { skip } from 'rxjs/operators';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport {\n  SplitLayoutDirective,\n  SplitLayoutMode,\n} from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.Vertical]: [\n      { flex: '0 1 env(fold-left)' },\n      { flex: '0 1 calc(100vw - env(fold-right))' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { flex: '0 1 env(fold-top)' },\n      { flex: '0 1 calc(100vh - env(fold-bottom))' },\n    ],\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.Vertical]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.Vertical]: [\n      {\n        position: 'absolute',\n        left: 0,\n        right: 'calc(100vw - env(fold-left))',\n      },\n      {\n        position: 'absolute',\n        left: 'env(fold-right)',\n        right: 0,\n      },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'env(fold-top)',\n      },\n      {\n        position: 'absolute',\n        top: 'env(fold-bottom)',\n        width: '100%',\n        maxHeight: 'calc(100vh - env(fold-bottom))',\n      },\n    ],\n  },\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n *\n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple\n * container element to the same window segment.\n *\n * Note that if you have set the read direction to Right-To-Left mode (`rtl`)\n * in CSS, the first segment will be the rightmost one.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]',\n})\nexport class WindowDirective implements OnDestroy {\n  private segment = -1;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi\n   * screen is detected.\n   *\n   * @param segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number | string) {\n    this.segment =\n      typeof segment === 'string' ? parseInt(segment, 10) : segment;\n    this.updateStyle();\n  }\n\n  constructor(\n    private element: ElementRef,\n    private screenContext: ScreenContext,\n    @Host() private splitLayout: SplitLayoutDirective\n  ) {\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .pipe(skip(1))\n      .subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n\n      const mode = this.splitLayout.layoutMode;\n      const direction = getComputedStyle(this.element.nativeElement)?.direction;\n      // Swap segments for vertical span and RTL mode\n      const segment =\n        spanning === ScreenSpanning.Vertical && direction === 'rtl'\n          ? 1 - this.segment\n          : this.segment;\n\n      this.layoutStyle = layoutStyles[mode][spanning][segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.0.3 (2021-03-12)\nBug Fixes\n\nupdate min angular version (d383609)\n\n1.0.2 (2021-03-12)\nBug Fixes\n\nangular min version (4aa85c7)\n\n1.0.1 (2021-03-11)\nBug Fixes\n\ndocs deployment (b1c68ac)\n\n1.0.0 (2021-03-11)\nBug Fixes\n\ndirectives export (536764f)\nfdIfSpan init (7e66b70)\nrevert naming changes (3ee5543)\n\nFeatures\n\nadd RTL support (8bdb155)\nadd ScreenContext first value and fix span check (487885f)\nadd SplitLayout directive (9fadf70)\nadd support for grid and absolute layouts (582e83e)\nadd Window directive (b2a3632)\ndemo test (90ad184)\nfinish demo project (db13ef1)\nimplement fdIfSpan directive (083b648)\nimplement ScreenContext service (466a9d7)\ninitial commit (9ff473a)\ninitial work on service API (962620d)\nupdate to ng 11 (4708aff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📖 ngx-foldable\n\n\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\n\n  \n\n\nSee the live demo or read the full documentation.\nHow to test on your browser\nThe dual-screen emulation feature requires Microsoft Edge or Google Chrome canary versions for now, with experimental flags to enable.\nFollow the instructions here to setup your browser for dual-screen emulation.\nStatus\nThis is currently an experimental project aiming to explore how existing web apps could be adapted to build responsive UIs on dual-screen devices, with as little changes as possible on the code.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n\n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on horizontal fold spanning.\n    This is only visible on vertical fold spanning.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe(context: ScreenContextData) {\n        console.log('Screen context changed:', context);\n      }\n  }\n}You can read the full documentation here.\nRelated work\n\nreact-foldable: a similar library built for React\nfoldable-devices/demos: web demos for foldables devices.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/screen-spanning.ts\n    \n    \n        \n            \n                \n                    \n                    ScreenSpanning\n                \n            \n            \n                \n                    Represents the screen spanning mode. \n\n                \n            \n            \n                \n                        \"fold-vertical\" | \"fold-horizontal\" | \"none\"\n\n                \n            \n        \n    \n    projects/lib/src/core/if-span.directive.ts\n    \n    \n        \n            \n                \n                    \n                    SpanCondition\n                \n            \n            \n                \n                    Spanning mode conditions for use with IfSpanDirective. \n\n                \n            \n            \n                \n                        \"fold-vertical\" | \"fold-horizontal\" | \"none\" | \"multi\"\n\n                \n            \n        \n    \n    projects/lib/src/core/split-layout.directive.ts\n    \n    \n        \n            \n                \n                    \n                    SplitLayoutMode\n                \n            \n            \n                \n                    Defines how the split layout container should be rendered when multi screen\nis detected.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"flex\" | \"grid\" | \"absolute\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            singleFoldHorizontal   (projects/.../media-queries.ts)\n                        \n                        \n                            singleFoldVertical   (projects/.../media-queries.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/screen-spanning.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ScreenSpanning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as ScreenSpanning,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as ScreenSpanning,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as ScreenSpanning,\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of screen spanning mode values. \n\n                    \n                \n\n            \n        \n\n    projects/lib/src/core/media-queries.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldHorizontal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-horizontal)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold horizontal screen mode. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldVertical\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-vertical)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold vertical screen mode. \n\n                    \n                \n\n            \n        \n\n    projects/lib/src/core/if-span.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SpanCondition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as SpanCondition,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of spanning mode conditions values for use with\nIfSpanDirective.\n\n                    \n                \n\n            \n        \n\n    projects/lib/src/core/split-layout.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SplitLayoutMode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of split layout modes values for use with\nSplitLayoutDirective.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
