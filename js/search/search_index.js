var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/FoldableModule.html",[0,1.551,1,1.07]],["body/modules/FoldableModule.html",[0,2.579,1,2.091,2,1.856,3,2.285,4,2.285,5,3.175,6,2.285,7,2.285,8,3.175,9,2.285,10,2.285,11,2.285,12,1.749,13,0.073,14,1.45,15,2.099,16,2.893,17,2.285,18,1.536,19,0.884,20,0.724,21,0.884,22,2.937,23,1.067,24,3.718,25,3.718,26,2.893,27,2.893,28,2.893,29,1.35,30,1.119,31,0.429,32,1.62,33,1.119,34,0.576,35,1.058,36,2.893,37,0.884,38,2.937,39,2.937,40,1.28,41,2.285,42,1.058,43,0.583,44,0.724,45,0.043,46,0.055,47,0.043]],["title/directives/IfSpanDirective.html",[12,0.892,48,0.739]],["body/directives/IfSpanDirective.html",[12,1.235,13,0.074,19,0.515,20,0.422,21,0.515,23,0.929,30,1.225,31,0.521,32,1.664,34,0.591,35,0.839,37,0.515,42,0.839,43,0.608,44,0.422,45,0.025,46,0.038,47,0.025,48,0.77,49,0.621,50,2.629,51,1.081,52,2.558,53,4.402,54,1.115,55,0.881,56,0.881,57,2.558,58,2.558,59,2.752,60,2.558,61,2.558,62,2.558,63,2.558,64,2.558,65,1.113,66,2.558,67,0.929,68,1.113,69,1.602,70,1.996,71,2.971,72,1.586,73,1.081,74,1.617,75,2.413,76,0.339,77,1.991,78,1.235,79,1.617,80,3.4,81,3.4,82,1.338,83,0.929,84,1.331,85,3.064,86,3.4,87,4.513,88,2.127,89,1.711,90,2.149,91,2.149,92,0.77,93,2.149,94,2.558,95,4.513,96,1.936,97,3.064,98,2.558,99,3.818,100,2.413,101,3.818,102,1.936,103,2.558,104,1.113,105,1.711,106,1.617,107,1.778,108,2.149,109,1.711,110,2.558,111,1.711,112,1.711,113,3.064,114,2.149,115,1.617,116,0.621,117,0.422,118,0.422,119,1.338,120,0.929,121,1.996,122,1.235,123,1.235,124,1.936,125,1.081,126,1.081,127,0.929,128,1.331,129,1.538,130,1.081,131,2.902,132,1.711,133,1.711,134,1.711,135,1.711,136,0.895,137,1.602,138,1.711,139,3.064,140,3.4,141,1.711,142,3.4,143,3.639,144,1.711,145,3.064,146,1.617,147,0.515,148,0.515,149,1.081,150,1.081,151,1.711,152,1.081,153,1.936,154,1.711,155,1.023,156,1.081,157,1.711,158,1.936,159,0.621,160,1.711,161,0.621,162,1.081,163,0.621,164,1.711,165,2.558,166,1.711,167,2.558,168,3.064,169,2.558]],["title/injectables/ScreenContext.html",[34,0.38,170,1.07]],["body/injectables/ScreenContext.html",[13,0.074,19,0.623,20,0.51,21,0.623,23,0.751,31,0.517,33,0.884,34,0.529,35,0.969,37,0.623,42,0.51,43,0.583,44,0.51,45,0.03,46,0.043,47,0.03,54,1.928,55,0.738,56,0.678,65,1.241,67,0.751,68,1.067,76,0.41,77,2.286,78,0.751,82,1.536,83,1.241,88,2.134,104,1.241,107,2.054,116,0.751,117,1.035,118,1.115,127,1.067,129,1.482,147,0.884,148,1.12,155,1.361,159,0.751,161,0.751,163,1.067,170,1.28,171,2.069,172,1.829,173,1.308,174,1.28,175,1.857,176,1.536,177,1.536,178,1.536,179,1.857,180,1.869,181,2.351,182,2.579,183,1.712,184,2.069,185,2.069,186,2.351,187,2.069,188,2.579,189,1.857,190,1.28,191,2.351,192,2.069,193,2.159,194,1.778,195,0.608,196,1.241,197,2.579,198,1.857,199,2.069,200,2.069,201,2.069,202,1.351,203,1.786,204,2.159,205,1.308,206,1.536,207,1.857,208,1.857,209,1.857,210,1.308,211,1.308,212,1.308,213,1.308,214,1.082,215,1.082,216,1.082,217,1.308,218,1.308,219,1.308,220,1.28,221,1.308,222,1.308,223,2.159,224,1.308,225,1.308,226,1.308,227,1.308,228,1.536,229,1.308,230,2.351,231,1.857,232,1.308,233,1.28,234,1.308,235,1.308,236,1.857,237,1.857,238,1.308,239,1.308,240,1.308,241,1.308,242,1.308,243,1.308,244,1.308,245,1.308,246,1.308,247,1.308,248,1.308,249,1.308,250,1.308,251,1.308,252,1.308,253,1.308,254,1.308,255,1.308]],["title/interfaces/ScreenContextData.html",[180,1.07,220,1.07]],["body/interfaces/ScreenContextData.html",[13,0.074,19,0.658,20,0.54,21,0.658,23,0.794,31,0.51,33,0.658,34,0.473,35,0.989,37,0.658,42,0.54,43,0.606,44,0.54,45,0.032,46,0.045,47,0.032,54,1.895,55,0.756,56,0.698,65,1.384,67,0.794,68,1.11,76,0.434,78,0.794,83,0.794,92,1.06,104,1.279,116,0.794,117,0.989,118,1.142,127,1.11,129,1.509,147,0.92,148,0.658,155,1.374,159,0.794,161,0.794,163,1.11,170,1.331,172,0.953,173,1.382,174,0.953,175,1.382,176,1.144,177,1.144,178,1.144,179,1.382,180,1.858,181,1.382,182,2.695,183,1.81,186,1.931,188,2.409,189,1.382,190,0.953,191,2.225,193,2.225,194,1.81,195,0.621,196,1.279,197,2.695,198,1.382,202,1.456,203,1.841,204,2.225,205,1.382,206,1.598,207,1.931,208,1.931,209,1.931,210,1.382,211,1.382,212,1.382,213,1.382,214,1.144,215,1.144,216,1.144,217,1.382,218,1.382,219,1.382,220,1.331,221,1.931,222,1.931,223,2.225,224,1.382,225,1.382,226,1.382,227,1.382,228,1.598,229,1.382,230,2.409,231,1.931,232,1.382,233,1.331,234,1.382,235,1.382,236,1.931,237,1.931,238,1.382,239,1.382,240,1.382,241,1.382,242,1.382,243,1.382,244,1.382,245,1.382,246,1.382,247,1.382,248,1.382,249,1.382,250,1.382,251,1.382,252,1.382,253,1.382,254,1.382,255,1.382,256,1.382,257,2.377]],["title/directives/SplitLayoutDirective.html",[14,0.739,48,0.739]],["body/directives/SplitLayoutDirective.html",[13,0.074,14,1.012,15,0.876,19,0.378,20,0.309,21,0.378,23,0.73,29,1.561,30,1.105,31,0.519,32,0.876,33,0.605,34,0.547,35,0.777,37,0.378,40,1.789,42,1.027,43,0.701,44,0.309,45,0.018,46,0.03,47,0.018,48,1.012,49,0.456,54,1.539,55,0.866,56,0.892,65,0.73,67,0.73,68,0.914,69,1.316,70,1.648,72,0.876,73,0.793,74,1.271,76,0.249,78,0.456,79,1.271,82,1.051,83,0.73,88,1.758,90,1.271,91,1.271,92,0.867,93,1.82,96,1.991,102,1.271,104,1.046,106,1.591,107,1.505,108,0.793,114,1.271,115,1.271,116,0.456,117,0.309,118,0.309,120,1.491,122,1.283,123,1.375,125,1.591,126,1.591,127,1.283,129,1.375,130,0.793,131,1.591,136,1.316,137,0.656,146,1.271,147,0.378,148,0.378,149,0.793,150,0.793,152,1.271,153,1.991,155,1.236,156,0.793,158,0.793,159,1.046,161,0.914,162,1.271,163,0.456,183,0.876,194,0.876,195,0.547,196,1.144,202,0.73,233,1.254,258,2.233,259,0.793,260,2.011,261,1.82,262,2.011,263,1.82,264,1.958,265,1.565,266,2.879,267,2.517,268,2.011,269,2.176,270,2.011,271,2.011,272,2.011,273,2.32,274,1.758,275,2.32,276,2.011,277,2.011,278,1.565,279,2.176,280,1.847,281,1.271,282,2.011,283,2.617,284,2.517,285,2.176,286,2.075,287,1.254,288,2.879,289,1.254,290,1.991,291,2.011,292,1.958,293,3.532,294,2.125,295,1.254,296,2.011,297,1.254,298,1.254,299,1.254,300,1.254,301,1.254,302,1.254,303,1.991,304,1.847,305,1.591,306,0.976,307,1.958,308,0.976,309,0.656,310,0.976,311,1.505,312,1.505,313,1.097,314,0.976,315,1.565,316,1.565,317,2.125,318,2.114,319,2.24,320,1.051,321,1.565,322,1.991,323,1.271,324,1.271,325,0.976,326,1.591,327,2.24,328,2.125,329,1.591,330,0.876,331,0.976,332,0.976,333,0.976,334,0.976,335,0.976,336,0.656,337,0.976,338,0.976,339,2.517,340,1.565,341,1.254,342,1.254,343,3.151,344,1.958,345,2.517,346,2.879,347,2.011,348,1.254,349,3.363,350,2.517,351,1.958,352,1.958,353,2.517,354,1.254,355,1.958,356,0.976,357,2.011,358,2.011,359,0.976,360,1.254,361,0.976,362,1.254,363,1.254,364,1.254,365,1.958,366,0.976,367,0.976,368,1.958,369,2.011,370,2.517,371,2.011,372,1.254,373,1.254,374,1.254,375,1.254,376,0.976,377,1.254,378,1.254,379,1.254,380,1.254]],["title/interfaces/Window.html",[195,0.38,220,1.07]],["body/interfaces/Window.html",[13,0.074,19,0.687,20,0.563,21,0.687,31,0.498,33,0.687,34,0.487,35,1.004,37,0.687,42,0.563,43,0.624,44,0.563,45,0.034,46,0.046,47,0.034,54,1.834,55,0.714,56,0.624,65,1.143,67,0.829,68,1.143,76,0.453,78,0.829,83,0.829,92,0.687,104,1.143,116,0.829,117,0.957,118,1.1,127,1.143,129,1.529,147,0.947,148,0.687,155,1.384,159,0.829,161,0.829,163,1.143,170,1.371,172,0.994,173,1.442,174,0.994,175,1.442,176,1.193,177,1.193,178,1.193,179,1.442,180,1.834,181,1.442,182,2.453,183,1.569,186,1.988,188,2.453,189,1.442,190,0.994,191,2.661,193,1.988,194,1.691,195,0.631,196,1.143,197,2.574,198,1.442,202,1.308,203,1.645,204,1.988,205,1.442,206,1.645,207,1.988,208,1.988,209,1.988,210,1.442,211,1.442,212,1.442,213,1.442,214,1.193,215,1.193,216,1.193,217,1.442,218,1.442,219,1.442,220,1.371,221,1.442,222,1.442,223,2.276,224,1.442,225,1.442,226,1.442,227,1.442,228,1.645,229,1.442,230,2.453,231,1.988,232,1.442,233,1.371,234,1.442,235,1.442,236,1.988,237,1.988,238,1.442,239,1.442,240,1.442,241,1.442,242,1.442,243,1.442,244,1.442,245,1.442,246,1.442,247,1.442,248,1.442,249,1.442,250,1.442,251,1.442,252,1.442,253,1.442,254,1.442,255,1.442,256,1.442,257,2.448,381,3.146]],["title/directives/WindowDirective.html",[15,1.07,48,0.739]],["body/directives/WindowDirective.html",[13,0.074,14,1.123,15,1.065,19,0.485,20,0.397,21,0.485,23,0.887,29,0.887,30,1.067,31,0.511,32,1.436,34,0.578,35,0.92,37,0.485,40,0.702,41,1.253,42,0.813,43,0.319,44,0.397,45,0.024,46,0.036,47,0.024,48,1.123,49,0.585,55,0.769,56,0.792,67,0.887,68,1.072,69,1.278,72,1.065,73,1.018,74,1.544,76,0.485,78,0.585,79,1.544,82,1.278,83,0.887,84,1.253,88,1.544,90,1.544,91,1.544,92,0.485,93,1.544,100,1.544,106,1.866,107,0.842,108,1.018,114,1.544,115,1.544,116,0.585,117,0.397,118,0.397,122,0.585,123,1.072,127,1.451,129,1.355,130,1.018,131,1.866,136,0.842,137,2.139,146,1.544,147,0.485,148,0.485,149,1.018,150,1.018,155,0.736,156,1.018,158,1.018,159,1.197,161,1.197,163,0.585,183,1.065,194,1.065,195,0.68,196,1.072,202,0.887,203,1.278,228,0.842,233,1.065,261,2.45,263,2.358,264,2.758,265,1.901,269,1.544,273,2.084,274,1.724,275,1.544,278,1.901,279,1.853,280,0.842,285,1.544,286,0.842,290,1.544,292,2.298,294,1.866,304,1.724,305,1.544,306,1.253,307,2.298,308,1.253,309,0.842,311,1.724,313,1.626,317,1.544,318,1.278,322,1.018,323,1.544,324,1.544,328,1.866,330,1.287,333,1.253,334,1.253,335,1.253,336,0.842,337,1.253,338,1.253,340,2.298,344,1.901,351,1.901,352,1.901,355,3.183,356,1.901,359,2.565,361,1.253,365,1.901,366,1.253,367,1.253,368,2.298,376,1.253,382,1.61,383,2.444,384,3.591,385,2.444,386,2.444,387,2.444,388,2.444,389,2.444,390,2.444,391,4.297,392,3.383,393,2.444,394,2.444,395,2.444,396,1.901,397,3.731,398,3.731,399,2.444,400,2.444,401,2.444,402,2.444,403,2.903,404,2.298,405,1.61,406,2.444,407,3.544,408,1.61,409,2.444,410,3.297,411,2.444,412,2.953,413,3.297,414,2.444,415,1.61,416,1.61,417,1.61,418,1.61,419,1.61,420,3.731,421,1.61,422,1.61,423,1.61,424,1.61,425,1.61,426,2.953,427,1.61,428,1.61]],["title/changelog.html",[429,1.309,430,1.309,431,2.071]],["body/changelog.html",[13,0.056,31,0.349,34,0.586,43,0.599,45,0.044,46,0.056,47,0.044,48,1.244,49,1.097,56,0.599,75,2.392,100,1.909,117,0.745,174,1.649,190,1.649,195,0.468,274,1.579,281,1.909,312,1.579,313,1.316,318,1.579,320,1.579,330,1.316,336,1.979,404,2.35,432,3.02,433,3.542,434,4.552,435,3.784,436,4.552,437,4.552,438,3.02,439,2.35,440,3.02,441,3.02,442,3.02,443,3.02,444,3.02,445,3.02,446,3.02,447,3.02,448,3.02,449,3.02,450,3.02,451,3.784,452,3.784,453,3.784,454,3.784,455,3.02,456,3.02,457,3.02,458,3.02,459,4.133,460,3.02,461,3.02,462,3.02,463,3.02,464,3.02,465,3.02,466,3.02,467,3.02,468,3.02,469,3.02,470,3.02,471,3.472,472,2.945,473,3.02,474,3.02,475,3.02,476,3.02,477,3.02,478,3.02,479,3.02,480,2.945,481,2.35,482,3.02,483,3.02,484,2.35,485,3.02,486,3.784,487,3.02,488,3.02,489,3.784,490,3.02,491,3.02,492,2.35,493,3.02,494,3.02,495,3.02,496,3.02]],["title/index.html",[76,0.411,429,1.309,430,1.309]],["body/index.html",[1,1.467,13,0.071,18,1.318,20,0.622,26,1.962,27,2.62,28,2.95,29,0.916,30,1.218,31,0.535,32,1.467,33,1.013,34,0.627,35,0.83,36,1.962,43,0.668,44,0.83,45,0.037,46,0.05,47,0.037,49,0.916,55,0.668,69,1.318,71,3.28,72,1.467,75,1.593,117,0.935,120,0.916,121,1.76,122,0.916,123,0.916,137,1.318,147,0.759,148,0.759,174,1.099,177,1.318,178,1.318,180,1.099,190,1.099,195,0.522,202,1.531,273,2.128,274,1.318,275,1.593,281,2.128,283,1.962,309,1.76,320,1.318,336,1.76,384,2.62,396,2.95,403,1.962,439,1.962,471,1.962,480,3.148,481,1.962,484,2.95,492,1.962,497,4.215,498,4.427,499,2.521,500,2.521,501,4.045,502,2.521,503,2.521,504,3.791,505,3.791,506,2.521,507,3.367,508,2.62,509,3.367,510,2.521,511,2.521,512,2.521,513,2.521,514,2.521,515,2.521,516,2.521,517,2.521,518,2.521,519,2.521,520,2.521,521,3.367,522,2.521,523,3.367,524,2.521,525,4.427,526,3.367,527,3.791,528,3.791,529,3.791,530,2.521,531,2.521,532,2.521,533,1.962,534,2.521,535,2.521,536,2.521,537,2.521,538,2.521,539,2.521,540,2.521,541,2.521,542,2.521,543,2.521,544,2.521,545,2.521,546,2.521,547,2.521,548,2.521,549,2.521,550,2.521,551,2.521,552,2.521,553,3.791,554,2.521,555,2.521,556,2.521,557,2.521,558,2.521,559,3.791,560,2.521,561,2.521,562,2.521,563,2.521,564,2.521,565,3.367,566,3.367,567,2.521,568,2.521,569,2.521,570,3.367,571,2.521,572,2.521,573,2.521,574,2.521,575,2.521,576,2.521]],["title/license.html",[429,1.309,430,1.309,577,1.612]],["body/license.html",[13,0.058,18,1.675,45,0.047,46,0.058,47,0.047,119,1.675,120,1.425,206,1.675,433,2.493,508,2.493,533,2.493,577,2.493,578,3.925,579,4.243,580,3.203,581,3.203,582,3.203,583,3.925,584,3.203,585,3.203,586,3.203,587,3.203,588,3.203,589,3.203,590,3.925,591,4.758,592,3.203,593,3.203,594,3.203,595,4.243,596,3.203,597,3.925,598,3.203,599,3.203,600,3.203,601,3.203,602,3.203,603,3.203,604,3.203,605,3.203,606,3.925,607,3.203,608,3.203,609,3.203,610,3.203,611,3.203,612,3.203,613,3.925,614,3.925,615,3.203,616,3.203,617,3.203,618,3.203,619,3.203,620,3.203,621,3.203,622,3.203,623,3.203,624,3.203,625,3.203,626,3.203,627,3.203,628,3.203,629,3.203,630,3.203,631,3.203,632,3.203,633,3.203,634,3.203,635,3.203,636,3.203,637,3.203,638,3.203,639,3.203,640,3.203,641,3.203,642,3.203,643,3.203]],["title/modules.html",[2,2.09]],["body/modules.html",[1,1.655,2,2.4,13,0.064,45,0.056,46,0.064,47,0.056,309,1.986,472,2.955,644,3.798,645,3.798]],["title/overview.html",[646,2.573]],["body/overview.html",[0,2.573,1,2.113,3,2.648,4,2.648,5,2.648,6,2.648,7,2.648,8,2.648,9,2.648,10,2.648,11,2.648,12,1.72,13,0.07,14,1.425,15,2.063,16,3.168,17,2.648,18,1.779,45,0.05,46,0.06,47,0.05,49,1.236,170,1.483,256,2.151,392,3.168,646,2.648,647,3.403,648,3.403]],["title/miscellaneous/typealiases.html",[649,1.083,650,2.941]],["body/miscellaneous/typealiases.html",[12,1.155,13,0.071,14,1.176,29,1.419,30,1.176,31,0.451,33,1.176,40,1.703,45,0.047,46,0.058,47,0.047,50,2.01,51,2.47,55,0.875,56,0.875,59,2.47,70,1.663,76,0.631,92,0.957,96,2.673,118,0.964,119,1.663,120,1.155,121,2.307,122,1.536,123,1.536,124,2.47,172,1.386,195,0.493,196,1.155,258,2.01,259,2.788,261,2.47,269,2.043,279,1.663,280,1.663,285,2.043,286,2.043,290,2.01,294,2.01,303,2.01,304,1.663,305,2.01,310,2.475,311,1.663,312,1.663,313,1.386,325,2.475,326,2.01,329,2.01,330,1.386,649,1.663,651,3.181,652,3.292,653,2.475,654,3.041,655,2.475,656,3.181]],["title/miscellaneous/variables.html",[649,1.083,657,2.288]],["body/miscellaneous/variables.html",[12,0.813,13,0.073,14,0.935,29,0.813,30,1.073,31,0.539,40,0.976,42,0.95,45,0.033,46,0.046,47,0.033,50,1.415,51,1.963,55,0.901,56,0.909,59,2.645,65,1.128,70,1.171,72,1.96,76,0.444,92,1.292,102,1.963,104,1.398,118,0.998,119,1.171,120,1.295,121,2.397,122,1.589,123,1.589,124,2.434,125,2.556,126,2.556,128,1.742,136,1.624,152,1.963,153,2.556,155,1.26,162,2.712,172,0.976,176,1.624,195,0.347,214,1.624,215,1.624,216,1.624,258,1.415,259,2.434,263,1.963,269,2.244,279,1.171,280,1.624,285,2.188,286,2.013,303,1.415,304,1.171,311,1.624,312,1.624,313,1.353,314,1.742,315,2.416,316,2.416,317,2.645,318,2.484,319,2.996,320,1.624,321,2.416,322,1.415,323,1.415,324,1.415,326,1.963,327,1.742,328,1.415,329,1.415,330,0.976,331,1.742,332,1.742,649,1.171,652,2.774,653,1.742,654,2.416,655,1.742,657,1.742,658,3.105,659,3.565,660,4.044,661,2.239,662,3.105]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":391,"title":{},"body":{"directives/WindowDirective.html":{}}}],["03",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["0683aa3",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["083b648",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":392,"title":{},"body":{"directives/WindowDirective.html":{},"overview.html":{}}}],["1.0.0",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":450,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["10",{"_index":419,"title":{},"body":{"directives/WindowDirective.html":{}}}],["100",{"_index":344,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["11",{"_index":459,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["14da071",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["1fr",{"_index":349,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["2",{"_index":648,"title":{},"body":{"overview.html":{}}}],["2021",{"_index":433,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3",{"_index":647,"title":{},"body":{"overview.html":{}}}],["3ee5543",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["466a9d7",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["4708aff",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["487885f",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["4aa85c7",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["536764f",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["582e83e",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["7e66b70",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["8bdb155",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["90ad184",{"_index":482,"title":{},"body":{"changelog.html":{}}}],["962620d",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["9fadf70",{"_index":476,"title":{},"body":{"changelog.html":{}}}],["9ff473a",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":337,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["above",{"_index":612,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":313,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["accepts",{"_index":63,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["accessors",{"_index":82,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["action",{"_index":637,"title":{},"body":{"license.html":{}}}],["active",{"_index":128,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":471,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["added",{"_index":265,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["addition",{"_index":276,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["aliases",{"_index":651,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":175,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["along",{"_index":272,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["and/or",{"_index":604,"title":{},"body":{"license.html":{}}}],["angular",{"_index":336,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["angular/core",{"_index":37,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["angular/platform",{"_index":308,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["api",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["app",{"_index":28,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["appcomponent",{"_index":535,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":532,"title":{},"body":{"index.html":{}}}],["arising",{"_index":641,"title":{},"body":{"license.html":{}}}],["asobject",{"_index":181,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["asobservable",{"_index":148,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["assign",{"_index":394,"title":{},"body":{"directives/WindowDirective.html":{}}}],["associated",{"_index":592,"title":{},"body":{"license.html":{}}}],["authors",{"_index":630,"title":{},"body":{"license.html":{}}}],["available",{"_index":194,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["b1c68ac",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["b2a3632",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["b84fc9f",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["before",{"_index":547,"title":{},"body":{"index.html":{}}}],["behaves",{"_index":60,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["between",{"_index":267,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["boolean",{"_index":65,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["bottom",{"_index":412,"title":{},"body":{"directives/WindowDirective.html":{}}}],["browse",{"_index":645,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":309,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"modules.html":{}}}],["bug",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":27,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["built",{"_index":572,"title":{},"body":{"index.html":{}}}],["c",{"_index":580,"title":{},"body":{"license.html":{}}}],["calc(100vh",{"_index":411,"title":{},"body":{"directives/WindowDirective.html":{}}}],["calc(100vw",{"_index":409,"title":{},"body":{"directives/WindowDirective.html":{}}}],["case",{"_index":153,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["change",{"_index":233,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["changed",{"_index":539,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":431,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":190,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["charge",{"_index":587,"title":{},"body":{"license.html":{}}}],["check",{"_index":320,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":315,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["choose",{"_index":266,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["chrome",{"_index":516,"title":{},"body":{"index.html":{}}}],["claim",{"_index":633,"title":{},"body":{"license.html":{}}}],["class",{"_index":44,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["clone",{"_index":555,"title":{},"body":{"index.html":{}}}],["cluster_foldablemodule",{"_index":9,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_declarations",{"_index":10,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["cluster_foldablemodule_exports",{"_index":11,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["code",{"_index":527,"title":{},"body":{"index.html":{}}}],["column",{"_index":347,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["columngap",{"_index":354,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["commit",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["common",{"_index":339,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["components",{"_index":499,"title":{},"body":{"index.html":{}}}],["condition",{"_index":95,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["conditions",{"_index":119,"title":{},"body":{"directives/IfSpanDirective.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["conduct",{"_index":546,"title":{},"body":{"index.html":{}}}],["connection",{"_index":642,"title":{},"body":{"license.html":{}}}],["console.log('screen",{"_index":538,"title":{},"body":{"index.html":{}}}],["const",{"_index":127,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor",{"_index":83,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["constructor(element",{"_index":287,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["constructor(private",{"_index":536,"title":{},"body":{"index.html":{}}}],["constructor(screencontext",{"_index":84,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{}}}],["container",{"_index":261,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["contains",{"_index":24,"title":{},"body":{"modules/FoldableModule.html":{}}}],["context",{"_index":117,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["context.ts",{"_index":173,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["context.ts:37",{"_index":184,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:68",{"_index":192,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:75",{"_index":199,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:82",{"_index":201,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:89",{"_index":187,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["context.ts:96",{"_index":185,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["contract",{"_index":638,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":543,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":540,"title":{},"body":{"index.html":{}}}],["copies",{"_index":606,"title":{},"body":{"license.html":{}}}],["copy",{"_index":590,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":579,"title":{},"body":{"license.html":{}}}],["creating",{"_index":262,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["css",{"_index":264,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["current",{"_index":54,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{}}}],["currentcontext",{"_index":226,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["currently",{"_index":388,"title":{},"body":{"directives/WindowDirective.html":{}}}],["d383609",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":634,"title":{},"body":{"license.html":{}}}],["db13ef1",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":594,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":643,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["declare",{"_index":218,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["default",{"_index":162,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["defines",{"_index":96,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["demo",{"_index":480,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["demos",{"_index":575,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["deployment",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["design",{"_index":271,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["destroyed",{"_index":227,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["detect",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detected",{"_index":294,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["dev",{"_index":560,"title":{},"body":{"index.html":{}}}],["device",{"_index":202,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["device's",{"_index":179,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["devices",{"_index":32,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["devices/demos",{"_index":573,"title":{},"body":{"index.html":{}}}],["different",{"_index":268,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["direction",{"_index":304,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["directive",{"_index":48,"title":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["directives",{"_index":49,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["display",{"_index":340,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["displayed",{"_index":273,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["distribute",{"_index":602,"title":{},"body":{"license.html":{}}}],["docs",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":508,"title":{},"body":{"index.html":{},"license.html":{}}}],["domrect",{"_index":197,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["dual",{"_index":501,"title":{},"body":{"index.html":{}}}],["duo",{"_index":505,"title":{},"body":{"index.html":{}}}],["edge",{"_index":514,"title":{},"body":{"index.html":{}}}],["element",{"_index":290,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["elementref",{"_index":288,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["elsetemplateref",{"_index":133,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["elseviewref",{"_index":135,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["embeddedviewref",{"_index":113,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["emitting",{"_index":189,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["emulation",{"_index":509,"title":{},"body":{"index.html":{}}}],["enable",{"_index":520,"title":{},"body":{"index.html":{}}}],["enumeration",{"_index":125,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["env(fold",{"_index":355,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["error('segment",{"_index":422,"title":{},"body":{"directives/WindowDirective.html":{}}}],["evaluates",{"_index":101,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["event",{"_index":629,"title":{},"body":{"license.html":{}}}],["example",{"_index":69,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["except",{"_index":62,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["experiences",{"_index":502,"title":{},"body":{"index.html":{}}}],["experimental",{"_index":518,"title":{},"body":{"index.html":{}}}],["export",{"_index":43,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["express",{"_index":620,"title":{},"body":{"license.html":{}}}],["expression",{"_index":66,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["extra",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":102,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["fdifspan",{"_index":75,"title":{},"body":{"directives/IfSpanDirective.html":{},"changelog.html":{},"index.html":{}}}],["fdifspan(condition",{"_index":138,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse",{"_index":80,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanelse(templateref",{"_index":144,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen",{"_index":81,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdifspanthen(templateref",{"_index":141,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["fdsplitlayout",{"_index":283,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"index.html":{}}}],["fdsplitlayout(options",{"_index":362,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fdwindow",{"_index":403,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["fdwindow(segment",{"_index":415,"title":{},"body":{"directives/WindowDirective.html":{}}}],["feature",{"_index":510,"title":{},"body":{"index.html":{}}}],["features",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["files",{"_index":593,"title":{},"body":{"license.html":{}}}],["filter",{"_index":209,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["finish",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":274,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["fitness",{"_index":625,"title":{},"body":{"license.html":{}}}],["fix",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["flags",{"_index":519,"title":{},"body":{"index.html":{}}}],["flex",{"_index":311,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["flexdirection",{"_index":345,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["fold",{"_index":121,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["foldable",{"_index":498,"title":{},"body":{"index.html":{}}}],["foldableimport",{"_index":530,"title":{},"body":{"index.html":{}}}],["foldablemodule",{"_index":1,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["foldables",{"_index":576,"title":{},"body":{"index.html":{}}}],["follow",{"_index":521,"title":{},"body":{"index.html":{}}}],["following",{"_index":611,"title":{},"body":{"license.html":{}}}],["format",{"_index":296,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["free",{"_index":586,"title":{},"body":{"license.html":{}}}],["fromevent",{"_index":205,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(singlefoldhorizontal",{"_index":232,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["fromevent(matchmedia(singlefoldvertical",{"_index":234,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["full",{"_index":507,"title":{},"body":{"index.html":{}}}],["function",{"_index":381,"title":{},"body":{"interfaces/Window.html":{}}}],["furnished",{"_index":609,"title":{},"body":{"license.html":{}}}],["gallery",{"_index":566,"title":{},"body":{"index.html":{}}}],["getcomputedstyle(this.element.nativeelement",{"_index":377,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getismultiscreen",{"_index":200,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["getlayoutmode",{"_index":297,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getreadingdirection",{"_index":301,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gets",{"_index":186,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreencontext",{"_index":247,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getscreenspanning",{"_index":198,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["getting",{"_index":429,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getwindoworder",{"_index":299,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["getwindowsegments",{"_index":191,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["given",{"_index":316,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":219,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["google",{"_index":515,"title":{},"body":{"index.html":{}}}],["granted",{"_index":585,"title":{},"body":{"license.html":{}}}],["grid",{"_index":312,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["gridarea",{"_index":413,"title":{},"body":{"directives/WindowDirective.html":{}}}],["gridautoflow",{"_index":353,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplateareas",{"_index":350,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplatecolumns",{"_index":348,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["gridtemplaterows",{"_index":357,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["height",{"_index":343,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["help",{"_index":26,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["here",{"_index":523,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":584,"title":{},"body":{"license.html":{}}}],["holders",{"_index":631,"title":{},"body":{"license.html":{}}}],["holds",{"_index":221,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["horizontal",{"_index":123,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":305,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["hostbinding",{"_index":306,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["hostbinding('style",{"_index":366,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ifspandirective",{"_index":12,"title":{"directives/IfSpanDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":106,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ignored",{"_index":242,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["implement",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":568,"title":{},"body":{"index.html":{}}}],["implements",{"_index":67,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["implied",{"_index":621,"title":{},"body":{"license.html":{}}}],["import",{"_index":35,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["imports",{"_index":531,"title":{},"body":{"index.html":{}}}],["included",{"_index":615,"title":{},"body":{"license.html":{}}}],["including",{"_index":597,"title":{},"body":{"license.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["information",{"_index":222,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["init",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["initial",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["initialization",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["injectable",{"_index":170,"title":{"injectables/ScreenContext.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["injectables",{"_index":171,"title":{},"body":{"injectables/ScreenContext.html":{}}}],["input",{"_index":114,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["inputs",{"_index":79,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["install",{"_index":529,"title":{},"body":{"index.html":{}}}],["instead",{"_index":64,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["instructions",{"_index":522,"title":{},"body":{"index.html":{}}}],["interface",{"_index":220,"title":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["interfaces",{"_index":256,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["ismultiscreen",{"_index":183,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["issue",{"_index":549,"title":{},"body":{"index.html":{}}}],["issues",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["isvalid",{"_index":321,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["js",{"_index":335,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["justifycontent",{"_index":341,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["keep",{"_index":277,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["kind",{"_index":619,"title":{},"body":{"license.html":{}}}],["lasorsa",{"_index":582,"title":{},"body":{"license.html":{}}}],["latest",{"_index":512,"title":{},"body":{"index.html":{}}}],["layout",{"_index":29,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive",{"_index":41,"title":{},"body":{"modules/FoldableModule.html":{},"directives/WindowDirective.html":{}}}],["layout.directive.ts",{"_index":259,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["layout.directive.ts:196",{"_index":291,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:205",{"_index":289,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:222",{"_index":298,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:231",{"_index":300,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layout.directive.ts:240",{"_index":302,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutmode",{"_index":284,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layouts",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["layoutstyle",{"_index":361,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles",{"_index":338,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["layoutstyles[mode][spanning][segment",{"_index":428,"title":{},"body":{"directives/WindowDirective.html":{}}}],["layoutstyles[this.mode].common",{"_index":379,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["layoutstyles[this.mode][reverse",{"_index":380,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["left",{"_index":398,"title":{},"body":{"directives/WindowDirective.html":{}}}],["lefttoright",{"_index":331,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["liability",{"_index":635,"title":{},"body":{"license.html":{}}}],["liable",{"_index":632,"title":{},"body":{"license.html":{}}}],["library",{"_index":525,"title":{},"body":{"index.html":{}}}],["license",{"_index":577,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":598,"title":{},"body":{"license.html":{}}}],["limited",{"_index":622,"title":{},"body":{"license.html":{}}}],["link",{"_index":42,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["list",{"_index":193,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["live",{"_index":506,"title":{},"body":{"index.html":{}}}],["locally",{"_index":554,"title":{},"body":{"index.html":{}}}],["look",{"_index":333,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["ltr",{"_index":329,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ma",{"_index":334,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["machine",{"_index":557,"title":{},"body":{"index.html":{}}}],["make",{"_index":544,"title":{},"body":{"index.html":{}}}],["making",{"_index":562,"title":{},"body":{"index.html":{}}}],["map",{"_index":208,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["match",{"_index":165,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matchcondition",{"_index":151,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matches",{"_index":57,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["matching",{"_index":46,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchmedia(singlefoldhorizontal).matches",{"_index":249,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["matchmedia(singlefoldvertical).matches",{"_index":250,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["maxheight",{"_index":414,"title":{},"body":{"directives/WindowDirective.html":{}}}],["meaning",{"_index":390,"title":{},"body":{"directives/WindowDirective.html":{}}}],["media",{"_index":216,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":624,"title":{},"body":{"license.html":{}}}],["merge",{"_index":206,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"license.html":{}}}],["metadata",{"_index":73,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["methods",{"_index":77,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{}}}],["microsoft",{"_index":513,"title":{},"body":{"index.html":{}}}],["min",{"_index":453,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":649,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":578,"title":{},"body":{"license.html":{}}}],["mode",{"_index":56,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modes",{"_index":314,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["modifications",{"_index":563,"title":{},"body":{"index.html":{}}}],["modify",{"_index":600,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/FoldableModule.html":{}},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/FoldableModule.html":{},"modules.html":{}}}],["multi",{"_index":30,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["multiple",{"_index":203,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["name",{"_index":91,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["naming",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["new",{"_index":228,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ng",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["ngif",{"_index":61,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["ngmodule",{"_index":36,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{}}}],["ngondestroy",{"_index":78,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["ngx",{"_index":497,"title":{},"body":{"index.html":{}}}],["none",{"_index":124,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":628,"title":{},"body":{"license.html":{}}}],["normal",{"_index":326,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["note",{"_index":395,"title":{},"body":{"directives/WindowDirective.html":{}}}],["notice",{"_index":613,"title":{},"body":{"license.html":{}}}],["npm",{"_index":528,"title":{},"body":{"index.html":{}}}],["null",{"_index":131,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["number",{"_index":416,"title":{},"body":{"directives/WindowDirective.html":{}}}],["object",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":188,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["obtaining",{"_index":589,"title":{},"body":{"license.html":{}}}],["ondestroy",{"_index":68,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["one",{"_index":400,"title":{},"body":{"directives/WindowDirective.html":{}}}],["option",{"_index":401,"title":{},"body":{"directives/WindowDirective.html":{}}}],["optional",{"_index":93,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["options",{"_index":293,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["options.trim().split",{"_index":373,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["order",{"_index":279,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["orientation",{"_index":439,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["otherwise",{"_index":640,"title":{},"body":{"license.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/FoldableModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":646,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packages",{"_index":558,"title":{},"body":{"index.html":{}}}],["param",{"_index":136,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["parameter",{"_index":282,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["parent",{"_index":260,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["parseint(segment",{"_index":418,"title":{},"body":{"directives/WindowDirective.html":{}}}],["parseoptions(options",{"_index":372,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["particular",{"_index":626,"title":{},"body":{"license.html":{}}}],["permission",{"_index":583,"title":{},"body":{"license.html":{}}}],["permit",{"_index":607,"title":{},"body":{"license.html":{}}}],["person",{"_index":588,"title":{},"body":{"license.html":{}}}],["persons",{"_index":608,"title":{},"body":{"license.html":{}}}],["photo",{"_index":565,"title":{},"body":{"index.html":{}}}],["pipe",{"_index":235,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["placed",{"_index":385,"title":{},"body":{"directives/WindowDirective.html":{}}}],["portions",{"_index":617,"title":{},"body":{"license.html":{}}}],["position",{"_index":359,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["posting",{"_index":548,"title":{},"body":{"index.html":{}}}],["private",{"_index":129,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["project",{"_index":484,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["projects/.../if",{"_index":655,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../media",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/.../screen",{"_index":653,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/.../split",{"_index":652,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/foldable.module.ts",{"_index":22,"title":{},"body":{"modules/FoldableModule.html":{}}}],["projects/lib/src/core/if",{"_index":50,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/media",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects/lib/src/core/screen",{"_index":172,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/split",{"_index":258,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects/lib/src/core/window.directive.ts",{"_index":382,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:114",{"_index":406,"title":{},"body":{"directives/WindowDirective.html":{}}}],["projects/lib/src/core/window.directive.ts:120",{"_index":405,"title":{},"body":{"directives/WindowDirective.html":{}}}],["properties",{"_index":257,"title":{},"body":{"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["provided",{"_index":533,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":224,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["publish",{"_index":601,"title":{},"body":{"license.html":{}}}],["pull",{"_index":550,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":627,"title":{},"body":{"license.html":{}}}],["queries",{"_index":217,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["queries.ts",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":176,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["re",{"_index":567,"title":{},"body":{"index.html":{}}}],["react",{"_index":570,"title":{},"body":{"index.html":{}}}],["read",{"_index":396,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["reading",{"_index":303,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection",{"_index":286,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["readingdirection.lefttoright",{"_index":378,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["readingdirection.righttoleft",{"_index":427,"title":{},"body":{"directives/WindowDirective.html":{}}}],["readonly",{"_index":223,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["receive",{"_index":177,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["refresh",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["regardless",{"_index":534,"title":{},"body":{"index.html":{}}}],["related",{"_index":564,"title":{},"body":{"index.html":{}}}],["relative",{"_index":360,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rendered",{"_index":310,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["repaints",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["replaysubject",{"_index":207,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["replaysubject(1",{"_index":229,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["repository",{"_index":556,"title":{},"body":{"index.html":{}}}],["represents",{"_index":656,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":551,"title":{},"body":{"index.html":{}}}],["requires",{"_index":511,"title":{},"body":{"index.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}],["restriction",{"_index":596,"title":{},"body":{"license.html":{}}}],["result",{"_index":45,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":47,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":155,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":107,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["reverse",{"_index":280,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["reversed",{"_index":402,"title":{},"body":{"directives/WindowDirective.html":{}}}],["revert",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["right",{"_index":397,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rightmost",{"_index":399,"title":{},"body":{"directives/WindowDirective.html":{}}}],["rights",{"_index":599,"title":{},"body":{"license.html":{}}}],["righttoleft",{"_index":332,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":225,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["row",{"_index":346,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rowgap",{"_index":358,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["rtl",{"_index":330,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":553,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":116,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["rxjs/operators",{"_index":213,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["safestyle",{"_index":307,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["same",{"_index":278,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sample",{"_index":569,"title":{},"body":{"index.html":{}}}],["screen",{"_index":31,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screencontext",{"_index":34,"title":{"injectables/ScreenContext.html":{}},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{}}}],["screencontextdata",{"_index":180,"title":{"interfaces/ScreenContextData.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["screencontextsubscription",{"_index":130,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["screens",{"_index":204,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["screenspanning",{"_index":118,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["screenspanning.horizontal",{"_index":159,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.none",{"_index":163,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["screenspanning.vertical",{"_index":161,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{}}}],["second",{"_index":275,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["see",{"_index":33,"title":{},"body":{"modules/FoldableModule.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["segment",{"_index":384,"title":{},"body":{"directives/WindowDirective.html":{},"index.html":{}}}],["segment0",{"_index":351,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segment1",{"_index":352,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["segments",{"_index":196,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":74,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["sell",{"_index":605,"title":{},"body":{"license.html":{}}}],["server",{"_index":561,"title":{},"body":{"index.html":{}}}],["service",{"_index":174,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"changelog.html":{},"index.html":{}}}],["services",{"_index":500,"title":{},"body":{"index.html":{}}}],["set",{"_index":137,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["setfdifspan(condition",{"_index":109,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanelse(templateref",{"_index":112,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdifspanthen(templateref",{"_index":111,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["setfdsplitlayout(options",{"_index":295,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["setfdwindow(segment",{"_index":408,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sets",{"_index":292,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["setup",{"_index":524,"title":{},"body":{"index.html":{}}}],["shall",{"_index":614,"title":{},"body":{"license.html":{}}}],["sharereplay",{"_index":210,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["sharereplay(1",{"_index":239,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["show",{"_index":99,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["showing",{"_index":110,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shown",{"_index":97,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["shows",{"_index":52,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["similar",{"_index":571,"title":{},"body":{"index.html":{}}}],["single",{"_index":72,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["singlefoldhorizontal",{"_index":214,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["singlefoldvertical",{"_index":215,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":591,"title":{},"body":{"license.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/FoldableModule.html":{},"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["space",{"_index":342,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["span",{"_index":100,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{}}}],["span.directive",{"_index":38,"title":{},"body":{"modules/FoldableModule.html":{}}}],["span.directive.ts",{"_index":51,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["span.directive.ts:64",{"_index":94,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:73",{"_index":103,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:81",{"_index":98,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:85",{"_index":89,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["span.directive.ts:99",{"_index":105,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition",{"_index":59,"title":{},"body":{"directives/IfSpanDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spancondition.horizontal",{"_index":157,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.multi",{"_index":154,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spancondition.vertical",{"_index":160,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["spanning",{"_index":55,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["spanning.ts",{"_index":654,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":58,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["specify",{"_index":383,"title":{},"body":{"directives/WindowDirective.html":{}}}],["split",{"_index":40,"title":{},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayout",{"_index":404,"title":{},"body":{"directives/WindowDirective.html":{},"changelog.html":{}}}],["splitlayoutdirective",{"_index":14,"title":{"directives/SplitLayoutDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode",{"_index":269,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.absolute",{"_index":324,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.flex",{"_index":322,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.grid",{"_index":323,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["splitlayoutmode.isvalid(mode",{"_index":374,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["start",{"_index":559,"title":{},"body":{"index.html":{}}}],["started",{"_index":430,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["startwith",{"_index":211,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["startwith(1",{"_index":238,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["steps",{"_index":552,"title":{},"body":{"index.html":{}}}],["strict",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":317,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":367,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subject",{"_index":610,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":603,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":149,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["subscribe(context",{"_index":537,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":115,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["substantial",{"_index":616,"title":{},"body":{"license.html":{}}}],["such",{"_index":503,"title":{},"body":{"index.html":{}}}],["suit",{"_index":270,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["support",{"_index":472,"title":{},"body":{"changelog.html":{},"modules.html":{}}}],["supported",{"_index":389,"title":{},"body":{"directives/WindowDirective.html":{}}}],["sure",{"_index":545,"title":{},"body":{"index.html":{}}}],["surface",{"_index":504,"title":{},"body":{"index.html":{}}}],["svg",{"_index":644,"title":{},"body":{"modules.html":{}}}],["swap",{"_index":426,"title":{},"body":{"directives/WindowDirective.html":{}}}],["switch",{"_index":152,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["takeuntil",{"_index":212,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["takeuntil(this.destroyed",{"_index":240,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["target",{"_index":407,"title":{},"body":{"directives/WindowDirective.html":{}}}],["template",{"_index":53,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["templateref",{"_index":87,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["test",{"_index":481,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["text",{"_index":70,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["thentemplateref",{"_index":132,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["thenviewref",{"_index":134,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.condition",{"_index":139,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.currentcontext",{"_index":230,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.ismultiscreen",{"_index":246,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.screenspanning",{"_index":237,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.currentcontext.windowsegments",{"_index":245,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.complete",{"_index":244,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.destroyed$.next",{"_index":243,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.direction",{"_index":371,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.elsetemplateref",{"_index":145,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.elseviewref",{"_index":168,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.getscreencontext",{"_index":231,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getscreenspanning",{"_index":236,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.getwindowsegments",{"_index":248,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.layoutstyle",{"_index":368,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.matchcondition",{"_index":166,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.mode",{"_index":369,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.order",{"_index":370,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.parseoptions(options",{"_index":364,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["this.screencontext",{"_index":147,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"index.html":{}}}],["this.screencontext$.subscribe",{"_index":241,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["this.screencontext.ismultiscreen",{"_index":156,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontext.screenspanning",{"_index":158,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription",{"_index":146,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.screencontextsubscription.unsubscribe",{"_index":150,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.segment",{"_index":420,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.layoutmode",{"_index":423,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.readingdirection",{"_index":425,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.splitlayout.windoworder",{"_index":424,"title":{},"body":{"directives/WindowDirective.html":{}}}],["this.thentemplateref",{"_index":142,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.thenviewref",{"_index":143,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.updatestyle",{"_index":365,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["this.updateview",{"_index":140,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.clear",{"_index":167,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":169,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["throw",{"_index":421,"title":{},"body":{"directives/WindowDirective.html":{}}}],["top",{"_index":410,"title":{},"body":{"directives/WindowDirective.html":{}}}],["tort",{"_index":639,"title":{},"body":{"license.html":{}}}],["true",{"_index":104,"title":{},"body":{"directives/IfSpanDirective.html":{},"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":387,"title":{},"body":{"directives/WindowDirective.html":{}}}],["type",{"_index":92,"title":{},"body":{"directives/IfSpanDirective.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":650,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":417,"title":{},"body":{"directives/WindowDirective.html":{}}}],["typescript",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["undefined",{"_index":363,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["up",{"_index":386,"title":{},"body":{"directives/WindowDirective.html":{}}}],["update",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["updates",{"_index":178,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{},"index.html":{}}}],["updatestyle",{"_index":376,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["updateview",{"_index":164,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["usage",{"_index":526,"title":{},"body":{"index.html":{}}}],["use",{"_index":120,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":263,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":281,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"changelog.html":{},"index.html":{}}}],["utilities",{"_index":25,"title":{},"body":{"modules/FoldableModule.html":{}}}],["valid",{"_index":319,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":318,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":126,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":657,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":517,"title":{},"body":{"index.html":{}}}],["vertical",{"_index":122,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["viewcontainer",{"_index":85,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["viewcontainerref",{"_index":86,"title":{},"body":{"directives/IfSpanDirective.html":{}}}],["visible",{"_index":71,"title":{},"body":{"directives/IfSpanDirective.html":{},"index.html":{}}}],["void",{"_index":108,"title":{},"body":{"directives/IfSpanDirective.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["vs",{"_index":325,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/typealiases.html":{}}}],["warranties",{"_index":623,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":618,"title":{},"body":{"license.html":{}}}],["web",{"_index":574,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":542,"title":{},"body":{"index.html":{}}}],["whether",{"_index":636,"title":{},"body":{"license.html":{}}}],["width",{"_index":356,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{}}}],["window",{"_index":195,"title":{"interfaces/Window.html":{}},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"directives/SplitLayoutDirective.html":{},"interfaces/Window.html":{},"directives/WindowDirective.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["window.directive",{"_index":39,"title":{},"body":{"modules/FoldableModule.html":{}}}],["window.getwindowsegments",{"_index":255,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerheight",{"_index":254,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.innerwidth",{"_index":253,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pagexoffset",{"_index":251,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["window.pageyoffset",{"_index":252,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["windowdirective",{"_index":15,"title":{"directives/WindowDirective.html":{}},"body":{"modules/FoldableModule.html":{},"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"overview.html":{}}}],["windoworder",{"_index":285,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["windoworder.isvalid(order",{"_index":375,"title":{},"body":{"directives/SplitLayoutDirective.html":{}}}],["windoworder.normal",{"_index":327,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"miscellaneous/variables.html":{}}}],["windoworder.reverse",{"_index":328,"title":{},"body":{"directives/SplitLayoutDirective.html":{},"directives/WindowDirective.html":{},"miscellaneous/variables.html":{}}}],["windowsegments",{"_index":182,"title":{},"body":{"injectables/ScreenContext.html":{},"interfaces/ScreenContextData.html":{},"interfaces/Window.html":{}}}],["within",{"_index":393,"title":{},"body":{"directives/WindowDirective.html":{}}}],["without",{"_index":595,"title":{},"body":{"license.html":{}}}],["work",{"_index":492,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["yohan",{"_index":581,"title":{},"body":{"license.html":{}}}],["you're",{"_index":541,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/FoldableModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/FoldableModule.html":{"url":"modules/FoldableModule.html","title":"module - FoldableModule","body":"\n                   \n\n\n\n\n    Modules\n    FoldableModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/lib/src/core/foldable.module.ts\n        \n\n\n        \n            Description\n        \n        \n            This module contains utilities to help you build your app layout for multi\nscreen devices.\nSee SplitLayoutDirective,\nWindowDirective,\nIfSpanDirective,\nScreenContext\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            IfSpanDirective\n                        \n                        \n                            SplitLayoutDirective\n                        \n                        \n                            WindowDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { IfSpanDirective } from './if-span.directive';\nimport { WindowDirective } from './window.directive';\nimport { SplitLayoutDirective } from './split-layout.directive';\n\n/**\n * This module contains utilities to help you build your app layout for multi\n * screen devices.\n *\n * See {@link SplitLayoutDirective},\n * {@link WindowDirective},\n * {@link IfSpanDirective},\n * {@link ScreenContext}\n */\n@NgModule({\n  declarations: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n  exports: [IfSpanDirective, WindowDirective, SplitLayoutDirective],\n})\nexport class FoldableModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/IfSpanDirective.html":{"url":"directives/IfSpanDirective.html","title":"directive - IfSpanDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  IfSpanDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/if-span.directive.ts\n        \n\n            \n                Description\n            \n            \n                Shows template only if the current screen spanning mode matches\nspecified SpanCondition.\nBehaves like ngIf, except that it accepts a SpanCondition instead of\na boolean expression.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            This text will only be visible on multi screen devices.\n                        \n                        \n                            This text will only be visible on single screen devices.\nThis text will only be visible on multi screen devices.\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdIfSpan]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdIfSpan\n                            \n                            \n                                fdIfSpanElse\n                            \n                            \n                                fdIfSpanThen\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdIfSpan\n                                \n                                \n                                    fdIfSpanThen\n                                \n                                \n                                    fdIfSpanElse\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, viewContainer: ViewContainerRef, templateRef: TemplateRef)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/if-span.directive.ts:85\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRef\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                            \n                        \n                \n                    \n                        The spanning mode condition that defines if the template should be shown.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to false. \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                            \n                        \n                \n                    \n                        A template to show if the span condition evaluates to true. \n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/if-span.directive.ts:99\n                \n            \n\n\n            \n                \n                    ignore \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdIfSpan\n                    \n                \n\n\n                \n                    \n                        setfdIfSpan(condition)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:64\n                                \n                            \n                    \n                        \n                                The spanning mode condition that defines if the template should be shown.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            condition\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The spanning mode condition for showing the template.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanThen\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanThen(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:73\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to true. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fdIfSpanElse\n                    \n                \n\n\n                \n                    \n                        setfdIfSpanElse(templateRef)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/if-span.directive.ts:81\n                                \n                            \n                    \n                        \n                                A template to show if the span condition evaluates to false. \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            templateRef\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/** Spanning mode conditions for use with {@link IfSpanDirective}. */\nexport type SpanCondition =\n  | 'fold-vertical'\n  | 'fold-horizontal'\n  | 'none'\n  | 'multi';\n/**\n * Enumeration of spanning mode conditions values for use with\n * {@link IfSpanDirective}.\n */\nexport const SpanCondition = {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as SpanCondition,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n};\n\n/**\n * Shows template only if the current screen spanning mode matches\n * specified {@link SpanCondition}.\n *\n * Behaves like `ngIf`, except that it accepts a {@link SpanCondition} instead of\n * a boolean expression.\n *\n * @example\n * This text will only be visible on multi screen devices.\n * @example\n * This text will only be visible on single screen devices.\n * This text will only be visible on multi screen devices.\n */\n@Directive({\n  selector: '[fdIfSpan]',\n})\nexport class IfSpanDirective implements OnDestroy {\n  private screenContextSubscription: Subscription | null = null;\n  private condition: SpanCondition | null = null;\n  private thenTemplateRef: TemplateRef | null = null;\n  private elseTemplateRef: TemplateRef | null = null;\n  private thenViewRef: EmbeddedViewRef | null = null;\n  private elseViewRef: EmbeddedViewRef | null = null;\n\n  /**\n   * The spanning mode condition that defines if the template should be shown.\n   *\n   * @param condition The spanning mode condition for showing the template.\n   */\n  @Input()\n  set fdIfSpan(condition: SpanCondition) {\n    if (condition !== this.condition) {\n      this.condition = condition;\n      this.updateView();\n    }\n  }\n\n  /** A template to show if the span condition evaluates to true. */\n  @Input()\n  set fdIfSpanThen(templateRef: TemplateRef | null) {\n    this.thenTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  /** A template to show if the span condition evaluates to false. */\n  @Input()\n  set fdIfSpanElse(templateRef: TemplateRef | null) {\n    this.elseTemplateRef = templateRef;\n    this.thenViewRef = null;\n    this.updateView();\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    private viewContainer: ViewContainerRef,\n    templateRef: TemplateRef\n  ) {\n    this.thenTemplateRef = templateRef;\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateView());\n  }\n\n  /** ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private matchCondition(): boolean {\n    switch (this.condition) {\n      case SpanCondition.Multi:\n        return this.screenContext.isMultiScreen;\n      case SpanCondition.Horizontal:\n        return this.screenContext.screenSpanning === ScreenSpanning.Horizontal;\n      case SpanCondition.Vertical:\n        return this.screenContext.screenSpanning === ScreenSpanning.Vertical;\n      default:\n        return this.screenContext.screenSpanning === ScreenSpanning.None;\n    }\n  }\n\n  private updateView() {\n    const match = this.matchCondition();\n\n    if (match) {\n      if (!this.thenViewRef) {\n        this.viewContainer.clear();\n        this.elseViewRef = null;\n        if (this.thenTemplateRef) {\n          this.thenViewRef = this.viewContainer.createEmbeddedView(\n            this.thenTemplateRef\n          );\n        }\n      }\n    } else {\n      if (!this.elseViewRef) {\n        this.viewContainer.clear();\n        this.thenViewRef = null;\n        if (this.elseTemplateRef) {\n          this.elseViewRef = this.viewContainer.createEmbeddedView(\n            this.elseTemplateRef\n          );\n        }\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenContext.html":{"url":"injectables/ScreenContext.html","title":"injectable - ScreenContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ScreenContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                This service allows to query and receive updates about current device's\nscreen context.\nSee ScreenContextData\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                asObject\n                            \n                            \n                                asObservable\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    windowSegments\n                                \n                                \n                                    screenSpanning\n                                \n                                \n                                    isMultiScreen\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/screen-context.ts:37\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObject\n                        \n                        \n                    \n                \n            \n            \n                \nasObject()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:96\n                \n            \n\n\n            \n                \n                    Gets the current screen context.\n\n\n                    \n                        Returns :         ScreenContextData\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            asObservable\n                        \n                        \n                    \n                \n            \n            \n                \nasObservable()\n                \n            \n\n\n            \n                \n                    Defined in projects/lib/src/core/screen-context.ts:89\n                \n            \n\n\n            \n                \n                    Gets an observable emitting when the screen context changes.\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        windowSegments\n                    \n                \n\n                \n                    \n                        getwindowSegments()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:68\n                                \n                            \n                    \n                        \n                                The list of available window segments.\n\n\n                                \n                                    Returns :     DOMRect[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        screenSpanning\n                    \n                \n\n                \n                    \n                        getscreenSpanning()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:75\n                                \n                            \n                    \n                        \n                                The current screen spanning mode.\n\n\n                                \n                                    Returns :         ScreenSpanning\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isMultiScreen\n                    \n                \n\n                \n                    \n                        getisMultiScreen()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/screen-context.ts:82\n                                \n                            \n                    \n                        \n                                True is current device have multiple screens available.\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(singleFoldHorizontal), 'change'),\n      fromEvent(matchMedia(singleFoldVertical), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenContextData.html":{"url":"interfaces/ScreenContextData.html","title":"interface - ScreenContextData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScreenContextData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n            \n                Description\n            \n            \n                Holds information about the device screen context.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        isMultiScreen\n                                \n                                \n                                        screenSpanning\n                                \n                                \n                                        windowSegments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isMultiScreen\n                                    \n                                \n                                \n                                    \n                                        isMultiScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    True is current device have multiple screens available. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        screenSpanning\n                                    \n                                \n                                \n                                    \n                                        screenSpanning:         ScreenSpanning\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ScreenSpanning\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The current screen spanning mode. \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        windowSegments\n                                    \n                                \n                                \n                                    \n                                        windowSegments:     DOMRect[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DOMRect[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The list of available window segments. \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(singleFoldHorizontal), 'change'),\n      fromEvent(matchMedia(singleFoldVertical), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SplitLayoutDirective.html":{"url":"directives/SplitLayoutDirective.html","title":"directive - SplitLayoutDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  SplitLayoutDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/split-layout.directive.ts\n        \n\n            \n                Description\n            \n            \n                Defines a parent layout container for creating a split layout on multi\nscreen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nYou can choose between different SplitLayoutMode to suit your\ndesign.\nThis directive should be used along with WindowDirective.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n\nIn addition, you can also choose keep the same window segments order or\nreverse it when the spanning mode change from vertical to horizontal using\na second optional parameter on the directive:\n\n* \n                        \n                        \n                            \n\n   Will be displayed on first screen in vertical spanning mode\n   and on the second screen in horizontal spanning mode.\n\n\n   Will be displayed on second screen in vertical spanning mode\n   and on the first screen in horizontal spanning mode.\n\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdSplitLayout]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdSplitLayout\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdSplitLayout\n                                \n                                \n                                    layoutMode\n                                \n                                \n                                    windowOrder\n                                \n                                \n                                    readingDirection\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(element: ElementRef, screenContext: ScreenContext)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/split-layout.directive.ts:205\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        element\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                            \n                        \n                \n                    \n                        Sets the current split layout options to use when multi screen is\ndetected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdSplitLayout\n                    \n                \n\n\n                \n                    \n                        setfdSplitLayout(options)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:196\n                                \n                            \n                    \n                        \n                                Sets the current split layout options to use when multi screen is\ndetected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The split layout options to use.\nFormat: [mode] [order]\n\nThe {\n\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        layoutMode\n                    \n                \n\n                \n                    \n                        getlayoutMode()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:222\n                                \n                            \n                    \n                        \n                                The current split layout mode to use when multi screen is detected.\n\n\n                                \n                                \n                                \n                                    Returns :         SplitLayoutMode\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        windowOrder\n                    \n                \n\n                \n                    \n                        getwindowOrder()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:231\n                                \n                            \n                    \n                        \n                                The window segments order to use when in horizontal spanning mode.\n\n\n                                \n                                \n                                \n                                    Returns :         WindowOrder\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readingDirection\n                    \n                \n\n                \n                    \n                        getreadingDirection()\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/split-layout.directive.ts:240\n                                \n                            \n                    \n                        \n                                The text reading direction for the host element.\n\n\n                                \n                                \n                                \n                                    Returns :         ReadingDirection\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\n\n/**\n * Defines how the split layout container should be rendered when multi screen\n * is detected.\n * See {@link SplitLayoutDirective}\n */\nexport type SplitLayoutMode = 'flex' | 'grid' | 'absolute';\n/**\n * Enumeration of split layout modes values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const SplitLayoutMode = {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines how the split layout container should order the window segments\n * when in horizontal spanning mode vs vertical spanning mode.\n * See {@link SplitLayoutDirective}\n */\nexport type WindowOrder = 'normal' | 'reverse';\n/**\n * Enumeration of window order values for use with\n * {@link SplitLayoutDirective}.\n */\nexport const WindowOrder = {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n};\n\n/**\n * Defines the text reading direction for the host element.\n */\nexport type ReadingDirection = 'ltr' | 'rtl';\n/**\n * Enumeration of the text reading direction values.\n */\nexport const ReadingDirection = {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n};\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    common: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {\n      flexDirection: 'row',\n    },\n    [ScreenSpanning.Horizontal]: {\n      flexDirection: 'column',\n    },\n    [WindowOrder.Reverse]: {\n      flexDirection: 'column-reverse',\n    },\n  },\n  [SplitLayoutMode.Grid]: {\n    common: {\n      display: 'grid',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateAreas: '\"segment0 segment1\"',\n      gridAutoFlow: 'row',\n      columnGap: 'env(fold-width)',\n    },\n    [ScreenSpanning.Horizontal]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment0\" \"segment1\"',\n      gridAutoFlow: 'row',\n      rowGap: 'env(fold-height)',\n    },\n    [WindowOrder.Reverse]: {\n      gridTemplateRows: '1fr 1fr',\n      gridTemplateAreas: '\"segment1\" \"segment0\"',\n      gridAutoFlow: 'row',\n      rowGap: 'env(fold-height)',\n    },\n  },\n  [SplitLayoutMode.Absolute]: {\n    common: {\n      position: 'relative',\n      height: '100%',\n    },\n    [ScreenSpanning.Vertical]: {},\n    [ScreenSpanning.Horizontal]: {},\n    [WindowOrder.Reverse]: {},\n  },\n};\n\n/**\n * Defines a parent layout container for creating a split layout on multi\n * screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * You can choose between different {@link SplitLayoutMode} to suit your\n * design.\n *\n * This directive should be used along with {@link WindowDirective}.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n *\n * In addition, you can also choose keep the same window segments order or\n * reverse it when the spanning mode change from vertical to horizontal using\n * a second optional parameter on the directive:\n *\n *  * @example\n * \n *              \n *                Will be displayed on first screen in vertical spanning mode\n *                and on the second screen in horizontal spanning mode.\n *              \n *              \n *                Will be displayed on second screen in vertical spanning mode\n *                and on the first screen in horizontal spanning mode.\n *              \n * \n */\n@Directive({\n  selector: '[fdSplitLayout]',\n})\nexport class SplitLayoutDirective implements OnDestroy {\n  private mode: SplitLayoutMode = SplitLayoutMode.Flex;\n  private order: WindowOrder = WindowOrder.Normal;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n  private direction: ReadingDirection = 'ltr';\n\n  /**\n   * Sets the current split layout options to use when multi screen is\n   * detected.\n   *\n   * @param options The split layout options to use.\n   * Format: `[mode] [order]`\n   * - The {@link SplitLayoutMode} to use (default is {@link SplitLayoutMode.Flex}).\n   * - The {@link WindowOrder} to use (default is {@link WindowOrder.Normal}).\n   */\n  @Input()\n  set fdSplitLayout(options: string | undefined) {\n    this.parseOptions(options || '');\n    this.updateStyle();\n  }\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  constructor(\n    private element: ElementRef,\n    private screenContext: ScreenContext\n  ) {\n    this.updateStyle();\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /**\n   * The current split layout mode to use when multi screen is detected.\n   *\n   * @return The current split layout mode.\n   */\n  get layoutMode(): SplitLayoutMode {\n    return this.mode;\n  }\n\n  /**\n   * The window segments order to use when in horizontal spanning mode.\n   *\n   * @return The current window order.\n   */\n  get windowOrder(): WindowOrder {\n    return this.order;\n  }\n\n  /**\n   * The text reading direction for the host element.\n   *\n   * @return The text reading direction.\n   */\n  get readingDirection(): ReadingDirection {\n    return this.direction;\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private parseOptions(options: string) {\n    let [mode, order] = options.trim().split(' ');\n    mode = SplitLayoutMode.isValid(mode) ? mode : SplitLayoutMode.Flex;\n    order = WindowOrder.isValid(order) ? order : WindowOrder.Normal;\n    this.mode = mode as SplitLayoutMode;\n    this.order = order as WindowOrder;\n  }\n\n  private updateStyle() {\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n    const reverse =\n      spanning === ScreenSpanning.Horizontal &&\n      this.order === WindowOrder.Reverse;\n\n    this.direction =\n      (getComputedStyle(this.element.nativeElement)\n        ?.direction as ReadingDirection) || ReadingDirection.LeftToRight;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      this.layoutStyle = {\n        ...layoutStyles[this.mode].common,\n        ...layoutStyles[this.mode][reverse ? WindowOrder.Reverse : spanning],\n      };\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/screen-context.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        getWindowSegments\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getWindowSegments\n                                    \n                                \n                                \n                                    \n                                        getWindowSegments:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport { fromEvent, merge, Observable, ReplaySubject } from 'rxjs';\nimport { map, filter, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport { singleFoldHorizontal, singleFoldVertical } from './media-queries';\nimport { ScreenSpanning } from './screen-spanning';\n\ndeclare global {\n  interface Window {\n    getWindowSegments: () => DOMRect[];\n  }\n}\n\n/**\n * Holds information about the device screen context.\n */\nexport interface ScreenContextData {\n  /** The list of available window segments. */\n  readonly windowSegments: DOMRect[];\n  /** The current screen spanning mode. */\n  readonly screenSpanning: ScreenSpanning;\n  /** True is current device have multiple screens available. */\n  readonly isMultiScreen: boolean;\n}\n\n/**\n * This service allows to query and receive updates about current device's\n * screen context.\n *\n * See {@link ScreenContextData}\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScreenContext implements ScreenContextData, OnDestroy {\n  private currentContext: ScreenContextData;\n  private screenContext$: Observable;\n  private destroyed$: ReplaySubject = new ReplaySubject(1);\n\n  constructor() {\n    this.currentContext = this.getScreenContext();\n    this.screenContext$ = merge(\n      fromEvent(matchMedia(singleFoldHorizontal), 'change'),\n      fromEvent(matchMedia(singleFoldVertical), 'change')\n    ).pipe(\n      filter(\n        () => this.getScreenSpanning() !== this.currentContext.screenSpanning\n      ),\n      startWith(1),\n      map(() => {\n        this.currentContext = this.getScreenContext();\n        return this.currentContext;\n      }),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n    this.screenContext$.subscribe();\n  }\n\n  /** @ignored */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * The list of available window segments.\n   */\n  get windowSegments(): DOMRect[] {\n    return this.currentContext.windowSegments;\n  }\n\n  /**\n   * The current screen spanning mode.\n   */\n  get screenSpanning(): ScreenSpanning {\n    return this.currentContext.screenSpanning;\n  }\n\n  /**\n   * True is current device have multiple screens available.\n   */\n  get isMultiScreen(): boolean {\n    return this.currentContext.isMultiScreen;\n  }\n\n  /**\n   * Gets an observable emitting when the screen context changes.\n   */\n  asObservable(): Observable {\n    return this.screenContext$;\n  }\n\n  /**\n   * Gets the current screen context.\n   */\n  asObject(): ScreenContextData {\n    return this.currentContext;\n  }\n\n  private getScreenContext(): ScreenContextData {\n    const windowSegments = this.getWindowSegments();\n    const screenSpanning = this.getScreenSpanning();\n    return {\n      windowSegments,\n      screenSpanning,\n      isMultiScreen: screenSpanning !== ScreenSpanning.None,\n    };\n  }\n\n  private getScreenSpanning(): ScreenSpanning {\n    if (matchMedia(singleFoldHorizontal).matches) {\n      return ScreenSpanning.Horizontal;\n    } else if (matchMedia(singleFoldVertical).matches) {\n      return ScreenSpanning.Vertical;\n    }\n    return ScreenSpanning.None;\n  }\n\n  private getWindowSegments(): DOMRect[] {\n    if (!('getWindowSegments' in window)) {\n      return [\n        new DOMRect(\n          window.pageXOffset,\n          window.pageYOffset,\n          window.innerWidth,\n          window.innerHeight\n        ),\n      ];\n    }\n    return window.getWindowSegments();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/WindowDirective.html":{"url":"directives/WindowDirective.html","title":"directive - WindowDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  WindowDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/lib/src/core/window.directive.ts\n        \n\n            \n                Description\n            \n            \n                This directive is used to set specify on which window segment the container\nshould be placed on multi screen devices.\nWhen used on a single screen device, no layout change (CSS) is added.\nOnly devices with up to two screen are currently supported, meaning that the\nwindow segment value must be either 0 or 1.\nThis directive can only be used within a SplitLayoutDirective.\nIf SplitLayoutMode is set to absolute, you can assign multiple\ncontainer element to the same window segment.\nNote that if you have set the read direction to Right-To-Left mode (rtl)\nin CSS, the first segment will be the rightmost one.\nIf the WindowOrder option is set to WindowOrder.Reverse,\nthe window segments order will be reversed in horizontal spanning mode.\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n            \n\n            \n                Example\n            \n            \n                        \n                            \n  Will be displayed on first screen\n  Will be displayed on second screen (if available)\n\n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [fdWindow]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fdWindow\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fdWindow\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(screenContext: ScreenContext, splitLayout: SplitLayoutDirective)\n                    \n                \n                        \n                            \n                                Defined in projects/lib/src/core/window.directive.ts:120\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        screenContext\n                                                  \n                                                        \n                                                                        ScreenContext\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        splitLayout\n                                                  \n                                                        \n                                                                    SplitLayoutDirective\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n                        \n                            \n                                    Defined in projects/lib/src/core/window.directive.ts:114\n                            \n                        \n                \n                    \n                        Sets the target window segment to display this container on when multi\nscreen is detected.\n\n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        fdWindow\n                    \n                \n\n\n                \n                    \n                        setfdWindow(segment)\n                    \n                \n                            \n                                \n                                    Defined in projects/lib/src/core/window.directive.ts:114\n                                \n                            \n                    \n                        \n                                Sets the target window segment to display this container on when multi\nscreen is detected.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                        Description\n                                                \n                                            \n                                            \n                                                    \n                                                            segment\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                            \n                                                                    The target window segment, must be 0 or 1.\n\n                                                            \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { Directive, Host, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { SafeStyle } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport { ScreenContext } from './screen-context';\nimport { ScreenSpanning } from './screen-spanning';\nimport {\n  ReadingDirection,\n  SplitLayoutDirective,\n  SplitLayoutMode,\n  WindowOrder,\n} from './split-layout.directive';\n\n/**\n * Look 'ma, CSS-in-JS with Angular! ಠ_ಠ\n *\n * @ignore\n */\nconst layoutStyles = {\n  [SplitLayoutMode.Flex]: {\n    [ScreenSpanning.Vertical]: [\n      { flex: '0 1 env(fold-left)' },\n      { flex: '0 1 calc(100vw - env(fold-right))' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { flex: '0 1 env(fold-top)' },\n      { flex: '0 1 calc(100vh - env(fold-bottom))' },\n    ],\n  },\n  [SplitLayoutMode.Grid]: {\n    [ScreenSpanning.Vertical]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      { gridArea: 'segment0' },\n      { gridArea: 'segment1' },\n    ],\n  },\n  [SplitLayoutMode.Absolute]: {\n    [ScreenSpanning.Vertical]: [\n      {\n        position: 'absolute',\n        left: 0,\n        right: 'calc(100vw - env(fold-left))',\n      },\n      {\n        position: 'absolute',\n        left: 'env(fold-right)',\n        right: 0,\n      },\n    ],\n    [ScreenSpanning.Horizontal]: [\n      {\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n        maxHeight: 'env(fold-top)',\n      },\n      {\n        position: 'absolute',\n        top: 'env(fold-bottom)',\n        width: '100%',\n        maxHeight: 'calc(100vh - env(fold-bottom))',\n      },\n    ],\n  },\n};\n\n/**\n * This directive is used to set specify on which window segment the container\n * should be placed on multi screen devices.\n *\n * When used on a single screen device, no layout change (CSS) is added.\n * Only devices with up to two screen are currently supported, meaning that the\n * window segment value must be either 0 or 1.\n *\n * This directive can only be used within a {@link SplitLayoutDirective}.\n * If {@link SplitLayoutMode} is set to `absolute`, you can assign multiple\n * container element to the same window segment.\n *\n * Note that if you have set the read direction to Right-To-Left mode (`rtl`)\n * in CSS, the first segment will be the rightmost one.\n *\n * If the {@link WindowOrder} option is set to {@link WindowOrder.Reverse},\n * the window segments order will be reversed in horizontal spanning mode.\n *\n * @example\n * \n *              Will be displayed on first screen\n *              Will be displayed on second screen (if available)\n * \n */\n@Directive({\n  selector: '[fdWindow]',\n})\nexport class WindowDirective implements OnDestroy {\n  private segment = -1;\n  private layoutStyle: SafeStyle = {};\n  private screenContextSubscription: Subscription | null = null;\n\n  /** @ignore */\n  @HostBinding('style')\n  get style(): SafeStyle {\n    return this.layoutStyle;\n  }\n\n  /**\n   * Sets the target window segment to display this container on when multi\n   * screen is detected.\n   *\n   * @param segment The target window segment, must be 0 or 1.\n   */\n  @Input()\n  set fdWindow(segment: number | string) {\n    segment = typeof segment === 'string' ? parseInt(segment, 10) : segment;\n    if (segment !== this.segment) {\n      this.segment = segment;\n      this.updateStyle();\n    }\n  }\n\n  constructor(\n    private screenContext: ScreenContext,\n    @Host() private splitLayout: SplitLayoutDirective\n  ) {\n    this.screenContextSubscription = this.screenContext\n      .asObservable()\n      .subscribe(() => this.updateStyle());\n  }\n\n  /** @ignore */\n  ngOnDestroy() {\n    if (this.screenContextSubscription !== null) {\n      this.screenContextSubscription.unsubscribe();\n    }\n  }\n\n  private updateStyle() {\n    if (this.segment === -1) {\n      return;\n    }\n\n    const isMultiScreen = this.screenContext.isMultiScreen;\n    const spanning = this.screenContext.screenSpanning;\n\n    if (isMultiScreen && spanning !== ScreenSpanning.None) {\n      if (this.segment  1) {\n        throw new Error('Segment index must be 0 or 1');\n      }\n\n      const mode = this.splitLayout.layoutMode;\n      const order = this.splitLayout.windowOrder;\n      const direction = this.splitLayout.readingDirection;\n      // Swap segments for vertical span and RTL mode or\n      // horizontal span and reverse window order\n      const swap =\n        (spanning === ScreenSpanning.Vertical &&\n          mode !== SplitLayoutMode.Grid &&\n          direction === ReadingDirection.RightToLeft) ||\n        (spanning === ScreenSpanning.Horizontal &&\n          mode === SplitLayoutMode.Absolute &&\n          order === WindowOrder.Reverse);\n\n      const segment = swap ? 1 - this.segment : this.segment;\n      this.layoutStyle = layoutStyles[mode][spanning][segment];\n    } else {\n      this.layoutStyle = {};\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n1.0.5 (2021-03-16)\nBug Fixes\n\nrefresh on orientation changes and extra repaints (0683aa3)\nscreen context initialization (14da071)\n\n1.0.4 (2021-03-16)\nBug Fixes\n\nissues when using typescript strict mode (b84fc9f)\n\n1.0.3 (2021-03-12)\nBug Fixes\n\nupdate min angular version (d383609)\n\n1.0.2 (2021-03-12)\nBug Fixes\n\nangular min version (4aa85c7)\n\n1.0.1 (2021-03-11)\nBug Fixes\n\ndocs deployment (b1c68ac)\n\n1.0.0 (2021-03-11)\nBug Fixes\n\ndirectives export (536764f)\nfdIfSpan init (7e66b70)\nrevert naming changes (3ee5543)\n\nFeatures\n\nadd RTL support (8bdb155)\nadd ScreenContext first value and fix span check (487885f)\nadd SplitLayout directive (9fadf70)\nadd support for grid and absolute layouts (582e83e)\nadd Window directive (b2a3632)\ndemo test (90ad184)\nfinish demo project (db13ef1)\nimplement fdIfSpan directive (083b648)\nimplement ScreenContext service (466a9d7)\ninitial commit (9ff473a)\ninitial work on service API (962620d)\nupdate to ng 11 (4708aff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n📖 ngx-foldable\n\n\n\n\n\n\nngx-foldable is a set of components and services to help you build dual-screen experiences for foldable or dual-screen devices, such as the Surface Duo\n\n\n  \n\n\nSee the live demo or read the full documentation.\nHow to test on your browser\nThe dual-screen emulation feature requires latest Microsoft Edge or Google Chrome versions, with experimental flags to enable.\nFollow the instructions here to setup your browser for dual-screen emulation.\nLibrary usage\nCheck out the demo source code to see an example usage of the library.\nAdd the library to your Angular project:\nnpm install ngx-foldableImport the library in your app:\nimport { FoldableModule } from 'ngx-foldable';\n...\n\n@NgModule({\n  ...\n  imports: [\n    FoldableModule\n    ...\n  ],\n  ...\n})\nexport class AppModule { }Use the provided fdSplitLayout, fdWindow and fdIfSpan directives to build your layout:\n\n\n\n  \n  \n    This will be displayed on the first window segment of a multi screen or single screen device.\n\n    This is only visible on a single screen device.\n    This is only visible on a multi screen device.\n  \n\n  \n  \n    This will be displayed on the second window segment of a multi screen device.\n\n    This is only visible on multi screen device, regardless of the orientation.\n    This is only visible on horizontal fold spanning.\n    This is only visible on vertical fold spanning.\n  \nUsing the ScreenContext service, you can also receive updates when the screen context changes:\nimport { ScreenContext } from 'ngx-foldable';\n...\nexport class AppComponent {\n  constructor(private screenContext: ScreenContext) {\n    this.screenContext\n      .asObservable()\n      .subscribe(context: ScreenContextData) {\n        console.log('Screen context changed:', context);\n      }\n  }\n}You can read the full documentation here.\nContributing\nYou're welcome to contribute to this project!\nMake sure you have read the code of conduct before posting an issue or a pull request.\nFollow these steps to run this project locally:\n\nClone the repository on your machine\nRun npm install to install packages\nRun npm start to start the dev server with the demo app\n\nYou can then start making modifications on the library or demo app code.\nRelated work\n\nSurface Duo Photo Gallery: Angular re-implementation of the Surface Duo Photo Gallery sample using this library\nreact-foldable: a similar library built for React\nfoldable-devices/demos: web demos for foldables devices.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2021 Yohan Lasorsa\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        FoldableModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FoldableModule\n\n\n\ncluster_FoldableModule_declarations\n\n\n\ncluster_FoldableModule_exports\n\n\n\n\nIfSpanDirective\n\nIfSpanDirective\n\n\n\nFoldableModule\n\nFoldableModule\n\nFoldableModule -->\n\nIfSpanDirective->FoldableModule\n\n\n\n\n\nSplitLayoutDirective\n\nSplitLayoutDirective\n\nFoldableModule -->\n\nSplitLayoutDirective->FoldableModule\n\n\n\n\n\nWindowDirective\n\nWindowDirective\n\nFoldableModule -->\n\nWindowDirective->FoldableModule\n\n\n\n\n\nIfSpanDirective \n\nIfSpanDirective \n\nIfSpanDirective  -->\n\nFoldableModule->IfSpanDirective \n\n\n\n\n\nSplitLayoutDirective \n\nSplitLayoutDirective \n\nSplitLayoutDirective  -->\n\nFoldableModule->SplitLayoutDirective \n\n\n\n\n\nWindowDirective \n\nWindowDirective \n\nWindowDirective  -->\n\nFoldableModule->WindowDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/split-layout.directive.ts\n    \n    \n        \n            \n                \n                    \n                    ReadingDirection\n                \n            \n            \n                \n                    Defines the text reading direction for the host element.\n\n                \n            \n            \n                \n                        \"ltr\" | \"rtl\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SplitLayoutMode\n                \n            \n            \n                \n                    Defines how the split layout container should be rendered when multi screen\nis detected.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"flex\" | \"grid\" | \"absolute\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WindowOrder\n                \n            \n            \n                \n                    Defines how the split layout container should order the window segments\nwhen in horizontal spanning mode vs vertical spanning mode.\nSee SplitLayoutDirective\n\n                \n            \n            \n                \n                        \"normal\" | \"reverse\"\n\n                \n            \n        \n    \n    projects/lib/src/core/screen-spanning.ts\n    \n    \n        \n            \n                \n                    \n                    ScreenSpanning\n                \n            \n            \n                \n                    Represents the screen spanning mode. \n\n                \n            \n            \n                \n                        \"fold-vertical\" | \"fold-horizontal\" | \"none\"\n\n                \n            \n        \n    \n    projects/lib/src/core/if-span.directive.ts\n    \n    \n        \n            \n                \n                    \n                    SpanCondition\n                \n            \n            \n                \n                    Spanning mode conditions for use with IfSpanDirective. \n\n                \n            \n            \n                \n                        \"fold-vertical\" | \"fold-horizontal\" | \"none\" | \"multi\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ReadingDirection   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            ScreenSpanning   (projects/.../screen-spanning.ts)\n                        \n                        \n                            singleFoldHorizontal   (projects/.../media-queries.ts)\n                        \n                        \n                            singleFoldVertical   (projects/.../media-queries.ts)\n                        \n                        \n                            SpanCondition   (projects/.../if-span.directive.ts)\n                        \n                        \n                            SplitLayoutMode   (projects/.../split-layout.directive.ts)\n                        \n                        \n                            WindowOrder   (projects/.../split-layout.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/lib/src/core/split-layout.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ReadingDirection\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  LeftToRight: 'ltr' as ReadingDirection,\n  RightToLeft: 'rtl' as ReadingDirection,\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of the text reading direction values.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SplitLayoutMode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Flex: 'flex' as SplitLayoutMode,\n  Grid: 'grid' as SplitLayoutMode,\n  Absolute: 'absolute' as SplitLayoutMode,\n\n  /**\n   * Checks if the given string value is a valid {@link SplitLayoutMode}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link SplitLayoutMode}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case SplitLayoutMode.Flex:\n      case SplitLayoutMode.Grid:\n      case SplitLayoutMode.Absolute:\n        return true;\n    }\n    return false;\n  },\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of split layout modes values for use with\nSplitLayoutDirective.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WindowOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Normal: 'normal' as WindowOrder,\n  Reverse: 'reverse' as WindowOrder,\n\n  /**\n   * Checks if the given string value is a valid {@link WindowOrder}.\n   *\n   * @param value The value to check.\n   * @return true if the value is a valid {@link WindowOrder}.\n   */\n  isValid: (value: string): boolean => {\n    switch (value) {\n      case WindowOrder.Normal:\n      case WindowOrder.Reverse:\n        return true;\n    }\n    return false;\n  },\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of window order values for use with\nSplitLayoutDirective.\n\n                    \n                \n\n            \n        \n\n    projects/lib/src/core/screen-spanning.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ScreenSpanning\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as ScreenSpanning,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as ScreenSpanning,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as ScreenSpanning,\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of screen spanning mode values. \n\n                    \n                \n\n            \n        \n\n    projects/lib/src/core/media-queries.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldHorizontal\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-horizontal)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold horizontal screen mode. \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            singleFoldVertical\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '(screen-spanning: single-fold-vertical)'\n                        \n                    \n\n                \n                    \n                        Media query used to detect single fold vertical screen mode. \n\n                    \n                \n\n            \n        \n\n    projects/lib/src/core/if-span.directive.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SpanCondition\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /** Screen spanning mode is single fold vertical. */\n  Vertical: 'fold-vertical' as SpanCondition,\n  /** Screen spanning mode is single fold horizontal. */\n  Horizontal: 'fold-horizontal' as SpanCondition,\n  /** No screen spanning (single screen mode). */\n  None: 'none' as SpanCondition,\n  /** Any screen spanning mode is active (multi screen mode). */\n  Multi: 'multi' as SpanCondition,\n}\n                        \n                    \n\n                \n                    \n                        Enumeration of spanning mode conditions values for use with\nIfSpanDirective.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
